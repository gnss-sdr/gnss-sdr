// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps_ephemeris.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gps_5fephemeris_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gps_5fephemeris_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gps_5fephemeris_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gps_5fephemeris_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_5fephemeris_2eproto;
namespace gnss_sdr {
class GpsEphemeris;
class GpsEphemerisDefaultTypeInternal;
extern GpsEphemerisDefaultTypeInternal _GpsEphemeris_default_instance_;
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> ::gnss_sdr::GpsEphemeris* Arena::CreateMaybeMessage<::gnss_sdr::GpsEphemeris>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gnss_sdr {

// ===================================================================

class GpsEphemeris PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.GpsEphemeris) */ {
 public:
  inline GpsEphemeris() : GpsEphemeris(nullptr) {};
  virtual ~GpsEphemeris();

  GpsEphemeris(const GpsEphemeris& from);
  GpsEphemeris(GpsEphemeris&& from) noexcept
    : GpsEphemeris() {
    *this = ::std::move(from);
  }

  inline GpsEphemeris& operator=(const GpsEphemeris& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsEphemeris& operator=(GpsEphemeris&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpsEphemeris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpsEphemeris* internal_default_instance() {
    return reinterpret_cast<const GpsEphemeris*>(
               &_GpsEphemeris_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpsEphemeris& a, GpsEphemeris& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsEphemeris* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsEphemeris* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpsEphemeris* New() const final {
    return CreateMaybeMessage<GpsEphemeris>(nullptr);
  }

  GpsEphemeris* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpsEphemeris>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpsEphemeris& from);
  void MergeFrom(const GpsEphemeris& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsEphemeris* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnss_sdr.GpsEphemeris";
  }
  protected:
  explicit GpsEphemeris(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gps_5fephemeris_2eproto);
    return ::descriptor_table_gps_5fephemeris_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM0FieldNumber = 2,
    kDeltaNFieldNumber = 3,
    kEccFieldNumber = 4,
    kSqrtAFieldNumber = 5,
    kOMEGA0FieldNumber = 6,
    kI0FieldNumber = 7,
    kOmegaFieldNumber = 8,
    kOMEGAdotFieldNumber = 9,
    kPRNFieldNumber = 1,
    kToeFieldNumber = 17,
    kIdotFieldNumber = 10,
    kCucFieldNumber = 11,
    kCusFieldNumber = 12,
    kCrcFieldNumber = 13,
    kCrsFieldNumber = 14,
    kCicFieldNumber = 15,
    kCisFieldNumber = 16,
    kAf0FieldNumber = 19,
    kAf1FieldNumber = 20,
    kAf2FieldNumber = 21,
    kTocFieldNumber = 18,
    kWNFieldNumber = 24,
    kSatClkDriftFieldNumber = 22,
    kDtrFieldNumber = 23,
    kTowFieldNumber = 25,
    kCodeOnL2FieldNumber = 26,
    kSVAccuracyFieldNumber = 28,
    kSVHealthFieldNumber = 29,
    kTGDFieldNumber = 30,
    kIODCFieldNumber = 31,
    kIODESF2FieldNumber = 32,
    kIODESF3FieldNumber = 33,
    kAODOFieldNumber = 34,
    kL2PDataFlagFieldNumber = 27,
    kFitIntervalFlagFieldNumber = 35,
    kIntegrityStatusFlagFieldNumber = 38,
    kAlertFlagFieldNumber = 39,
    kAntispoofingFlagFieldNumber = 40,
    kSpare1FieldNumber = 36,
    kSpare2FieldNumber = 37,
  };
  // double M_0 = 2;
  void clear_m_0();
  double m_0() const;
  void set_m_0(double value);
  private:
  double _internal_m_0() const;
  void _internal_set_m_0(double value);
  public:

  // double delta_n = 3;
  void clear_delta_n();
  double delta_n() const;
  void set_delta_n(double value);
  private:
  double _internal_delta_n() const;
  void _internal_set_delta_n(double value);
  public:

  // double ecc = 4;
  void clear_ecc();
  double ecc() const;
  void set_ecc(double value);
  private:
  double _internal_ecc() const;
  void _internal_set_ecc(double value);
  public:

  // double sqrtA = 5;
  void clear_sqrta();
  double sqrta() const;
  void set_sqrta(double value);
  private:
  double _internal_sqrta() const;
  void _internal_set_sqrta(double value);
  public:

  // double OMEGA_0 = 6;
  void clear_omega_0();
  double omega_0() const;
  void set_omega_0(double value);
  private:
  double _internal_omega_0() const;
  void _internal_set_omega_0(double value);
  public:

  // double i_0 = 7;
  void clear_i_0();
  double i_0() const;
  void set_i_0(double value);
  private:
  double _internal_i_0() const;
  void _internal_set_i_0(double value);
  public:

  // double omega = 8;
  void clear_omega();
  double omega() const;
  void set_omega(double value);
  private:
  double _internal_omega() const;
  void _internal_set_omega(double value);
  public:

  // double OMEGAdot = 9;
  void clear_omegadot();
  double omegadot() const;
  void set_omegadot(double value);
  private:
  double _internal_omegadot() const;
  void _internal_set_omegadot(double value);
  public:

  // int32 PRN = 1;
  void clear_prn();
  ::PROTOBUF_NAMESPACE_ID::int32 prn() const;
  void set_prn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prn() const;
  void _internal_set_prn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toe = 17;
  void clear_toe();
  ::PROTOBUF_NAMESPACE_ID::int32 toe() const;
  void set_toe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toe() const;
  void _internal_set_toe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double idot = 10;
  void clear_idot();
  double idot() const;
  void set_idot(double value);
  private:
  double _internal_idot() const;
  void _internal_set_idot(double value);
  public:

  // double Cuc = 11;
  void clear_cuc();
  double cuc() const;
  void set_cuc(double value);
  private:
  double _internal_cuc() const;
  void _internal_set_cuc(double value);
  public:

  // double Cus = 12;
  void clear_cus();
  double cus() const;
  void set_cus(double value);
  private:
  double _internal_cus() const;
  void _internal_set_cus(double value);
  public:

  // double Crc = 13;
  void clear_crc();
  double crc() const;
  void set_crc(double value);
  private:
  double _internal_crc() const;
  void _internal_set_crc(double value);
  public:

  // double Crs = 14;
  void clear_crs();
  double crs() const;
  void set_crs(double value);
  private:
  double _internal_crs() const;
  void _internal_set_crs(double value);
  public:

  // double Cic = 15;
  void clear_cic();
  double cic() const;
  void set_cic(double value);
  private:
  double _internal_cic() const;
  void _internal_set_cic(double value);
  public:

  // double Cis = 16;
  void clear_cis();
  double cis() const;
  void set_cis(double value);
  private:
  double _internal_cis() const;
  void _internal_set_cis(double value);
  public:

  // double af0 = 19;
  void clear_af0();
  double af0() const;
  void set_af0(double value);
  private:
  double _internal_af0() const;
  void _internal_set_af0(double value);
  public:

  // double af1 = 20;
  void clear_af1();
  double af1() const;
  void set_af1(double value);
  private:
  double _internal_af1() const;
  void _internal_set_af1(double value);
  public:

  // double af2 = 21;
  void clear_af2();
  double af2() const;
  void set_af2(double value);
  private:
  double _internal_af2() const;
  void _internal_set_af2(double value);
  public:

  // int32 toc = 18;
  void clear_toc();
  ::PROTOBUF_NAMESPACE_ID::int32 toc() const;
  void set_toc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toc() const;
  void _internal_set_toc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 WN = 24;
  void clear_wn();
  ::PROTOBUF_NAMESPACE_ID::int32 wn() const;
  void set_wn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wn() const;
  void _internal_set_wn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double satClkDrift = 22;
  void clear_satclkdrift();
  double satclkdrift() const;
  void set_satclkdrift(double value);
  private:
  double _internal_satclkdrift() const;
  void _internal_set_satclkdrift(double value);
  public:

  // double dtr = 23;
  void clear_dtr();
  double dtr() const;
  void set_dtr(double value);
  private:
  double _internal_dtr() const;
  void _internal_set_dtr(double value);
  public:

  // int32 tow = 25;
  void clear_tow();
  ::PROTOBUF_NAMESPACE_ID::int32 tow() const;
  void set_tow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tow() const;
  void _internal_set_tow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code_on_L2 = 26;
  void clear_code_on_l2();
  ::PROTOBUF_NAMESPACE_ID::int32 code_on_l2() const;
  void set_code_on_l2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code_on_l2() const;
  void _internal_set_code_on_l2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SV_accuracy = 28;
  void clear_sv_accuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 sv_accuracy() const;
  void set_sv_accuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sv_accuracy() const;
  void _internal_set_sv_accuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SV_health = 29;
  void clear_sv_health();
  ::PROTOBUF_NAMESPACE_ID::int32 sv_health() const;
  void set_sv_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sv_health() const;
  void _internal_set_sv_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double TGD = 30;
  void clear_tgd();
  double tgd() const;
  void set_tgd(double value);
  private:
  double _internal_tgd() const;
  void _internal_set_tgd(double value);
  public:

  // int32 IODC = 31;
  void clear_iodc();
  ::PROTOBUF_NAMESPACE_ID::int32 iodc() const;
  void set_iodc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iodc() const;
  void _internal_set_iodc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IODE_SF2 = 32;
  void clear_iode_sf2();
  ::PROTOBUF_NAMESPACE_ID::int32 iode_sf2() const;
  void set_iode_sf2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iode_sf2() const;
  void _internal_set_iode_sf2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IODE_SF3 = 33;
  void clear_iode_sf3();
  ::PROTOBUF_NAMESPACE_ID::int32 iode_sf3() const;
  void set_iode_sf3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iode_sf3() const;
  void _internal_set_iode_sf3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AODO = 34;
  void clear_aodo();
  ::PROTOBUF_NAMESPACE_ID::int32 aodo() const;
  void set_aodo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aodo() const;
  void _internal_set_aodo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool L2_P_data_flag = 27;
  void clear_l2_p_data_flag();
  bool l2_p_data_flag() const;
  void set_l2_p_data_flag(bool value);
  private:
  bool _internal_l2_p_data_flag() const;
  void _internal_set_l2_p_data_flag(bool value);
  public:

  // bool fit_interval_flag = 35;
  void clear_fit_interval_flag();
  bool fit_interval_flag() const;
  void set_fit_interval_flag(bool value);
  private:
  bool _internal_fit_interval_flag() const;
  void _internal_set_fit_interval_flag(bool value);
  public:

  // bool integrity_status_flag = 38;
  void clear_integrity_status_flag();
  bool integrity_status_flag() const;
  void set_integrity_status_flag(bool value);
  private:
  bool _internal_integrity_status_flag() const;
  void _internal_set_integrity_status_flag(bool value);
  public:

  // bool alert_flag = 39;
  void clear_alert_flag();
  bool alert_flag() const;
  void set_alert_flag(bool value);
  private:
  bool _internal_alert_flag() const;
  void _internal_set_alert_flag(bool value);
  public:

  // bool antispoofing_flag = 40;
  void clear_antispoofing_flag();
  bool antispoofing_flag() const;
  void set_antispoofing_flag(bool value);
  private:
  bool _internal_antispoofing_flag() const;
  void _internal_set_antispoofing_flag(bool value);
  public:

  // double spare1 = 36;
  void clear_spare1();
  double spare1() const;
  void set_spare1(double value);
  private:
  double _internal_spare1() const;
  void _internal_set_spare1(double value);
  public:

  // double spare2 = 37;
  void clear_spare2();
  double spare2() const;
  void set_spare2(double value);
  private:
  double _internal_spare2() const;
  void _internal_set_spare2(double value);
  public:

  // @@protoc_insertion_point(class_scope:gnss_sdr.GpsEphemeris)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double m_0_;
  double delta_n_;
  double ecc_;
  double sqrta_;
  double omega_0_;
  double i_0_;
  double omega_;
  double omegadot_;
  ::PROTOBUF_NAMESPACE_ID::int32 prn_;
  ::PROTOBUF_NAMESPACE_ID::int32 toe_;
  double idot_;
  double cuc_;
  double cus_;
  double crc_;
  double crs_;
  double cic_;
  double cis_;
  double af0_;
  double af1_;
  double af2_;
  ::PROTOBUF_NAMESPACE_ID::int32 toc_;
  ::PROTOBUF_NAMESPACE_ID::int32 wn_;
  double satclkdrift_;
  double dtr_;
  ::PROTOBUF_NAMESPACE_ID::int32 tow_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_on_l2_;
  ::PROTOBUF_NAMESPACE_ID::int32 sv_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 sv_health_;
  double tgd_;
  ::PROTOBUF_NAMESPACE_ID::int32 iodc_;
  ::PROTOBUF_NAMESPACE_ID::int32 iode_sf2_;
  ::PROTOBUF_NAMESPACE_ID::int32 iode_sf3_;
  ::PROTOBUF_NAMESPACE_ID::int32 aodo_;
  bool l2_p_data_flag_;
  bool fit_interval_flag_;
  bool integrity_status_flag_;
  bool alert_flag_;
  bool antispoofing_flag_;
  double spare1_;
  double spare2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_5fephemeris_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpsEphemeris

// int32 PRN = 1;
inline void GpsEphemeris::clear_prn() {
  prn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_prn() const {
  return prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::prn() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.PRN)
  return _internal_prn();
}
inline void GpsEphemeris::_internal_set_prn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prn_ = value;
}
inline void GpsEphemeris::set_prn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prn(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.PRN)
}

// double M_0 = 2;
inline void GpsEphemeris::clear_m_0() {
  m_0_ = 0;
}
inline double GpsEphemeris::_internal_m_0() const {
  return m_0_;
}
inline double GpsEphemeris::m_0() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.M_0)
  return _internal_m_0();
}
inline void GpsEphemeris::_internal_set_m_0(double value) {
  
  m_0_ = value;
}
inline void GpsEphemeris::set_m_0(double value) {
  _internal_set_m_0(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.M_0)
}

// double delta_n = 3;
inline void GpsEphemeris::clear_delta_n() {
  delta_n_ = 0;
}
inline double GpsEphemeris::_internal_delta_n() const {
  return delta_n_;
}
inline double GpsEphemeris::delta_n() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.delta_n)
  return _internal_delta_n();
}
inline void GpsEphemeris::_internal_set_delta_n(double value) {
  
  delta_n_ = value;
}
inline void GpsEphemeris::set_delta_n(double value) {
  _internal_set_delta_n(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.delta_n)
}

// double ecc = 4;
inline void GpsEphemeris::clear_ecc() {
  ecc_ = 0;
}
inline double GpsEphemeris::_internal_ecc() const {
  return ecc_;
}
inline double GpsEphemeris::ecc() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.ecc)
  return _internal_ecc();
}
inline void GpsEphemeris::_internal_set_ecc(double value) {
  
  ecc_ = value;
}
inline void GpsEphemeris::set_ecc(double value) {
  _internal_set_ecc(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.ecc)
}

// double sqrtA = 5;
inline void GpsEphemeris::clear_sqrta() {
  sqrta_ = 0;
}
inline double GpsEphemeris::_internal_sqrta() const {
  return sqrta_;
}
inline double GpsEphemeris::sqrta() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.sqrtA)
  return _internal_sqrta();
}
inline void GpsEphemeris::_internal_set_sqrta(double value) {
  
  sqrta_ = value;
}
inline void GpsEphemeris::set_sqrta(double value) {
  _internal_set_sqrta(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.sqrtA)
}

// double OMEGA_0 = 6;
inline void GpsEphemeris::clear_omega_0() {
  omega_0_ = 0;
}
inline double GpsEphemeris::_internal_omega_0() const {
  return omega_0_;
}
inline double GpsEphemeris::omega_0() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.OMEGA_0)
  return _internal_omega_0();
}
inline void GpsEphemeris::_internal_set_omega_0(double value) {
  
  omega_0_ = value;
}
inline void GpsEphemeris::set_omega_0(double value) {
  _internal_set_omega_0(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.OMEGA_0)
}

// double i_0 = 7;
inline void GpsEphemeris::clear_i_0() {
  i_0_ = 0;
}
inline double GpsEphemeris::_internal_i_0() const {
  return i_0_;
}
inline double GpsEphemeris::i_0() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.i_0)
  return _internal_i_0();
}
inline void GpsEphemeris::_internal_set_i_0(double value) {
  
  i_0_ = value;
}
inline void GpsEphemeris::set_i_0(double value) {
  _internal_set_i_0(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.i_0)
}

// double omega = 8;
inline void GpsEphemeris::clear_omega() {
  omega_ = 0;
}
inline double GpsEphemeris::_internal_omega() const {
  return omega_;
}
inline double GpsEphemeris::omega() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.omega)
  return _internal_omega();
}
inline void GpsEphemeris::_internal_set_omega(double value) {
  
  omega_ = value;
}
inline void GpsEphemeris::set_omega(double value) {
  _internal_set_omega(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.omega)
}

// double OMEGAdot = 9;
inline void GpsEphemeris::clear_omegadot() {
  omegadot_ = 0;
}
inline double GpsEphemeris::_internal_omegadot() const {
  return omegadot_;
}
inline double GpsEphemeris::omegadot() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.OMEGAdot)
  return _internal_omegadot();
}
inline void GpsEphemeris::_internal_set_omegadot(double value) {
  
  omegadot_ = value;
}
inline void GpsEphemeris::set_omegadot(double value) {
  _internal_set_omegadot(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.OMEGAdot)
}

// double idot = 10;
inline void GpsEphemeris::clear_idot() {
  idot_ = 0;
}
inline double GpsEphemeris::_internal_idot() const {
  return idot_;
}
inline double GpsEphemeris::idot() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.idot)
  return _internal_idot();
}
inline void GpsEphemeris::_internal_set_idot(double value) {
  
  idot_ = value;
}
inline void GpsEphemeris::set_idot(double value) {
  _internal_set_idot(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.idot)
}

// double Cuc = 11;
inline void GpsEphemeris::clear_cuc() {
  cuc_ = 0;
}
inline double GpsEphemeris::_internal_cuc() const {
  return cuc_;
}
inline double GpsEphemeris::cuc() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Cuc)
  return _internal_cuc();
}
inline void GpsEphemeris::_internal_set_cuc(double value) {
  
  cuc_ = value;
}
inline void GpsEphemeris::set_cuc(double value) {
  _internal_set_cuc(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Cuc)
}

// double Cus = 12;
inline void GpsEphemeris::clear_cus() {
  cus_ = 0;
}
inline double GpsEphemeris::_internal_cus() const {
  return cus_;
}
inline double GpsEphemeris::cus() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Cus)
  return _internal_cus();
}
inline void GpsEphemeris::_internal_set_cus(double value) {
  
  cus_ = value;
}
inline void GpsEphemeris::set_cus(double value) {
  _internal_set_cus(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Cus)
}

// double Crc = 13;
inline void GpsEphemeris::clear_crc() {
  crc_ = 0;
}
inline double GpsEphemeris::_internal_crc() const {
  return crc_;
}
inline double GpsEphemeris::crc() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Crc)
  return _internal_crc();
}
inline void GpsEphemeris::_internal_set_crc(double value) {
  
  crc_ = value;
}
inline void GpsEphemeris::set_crc(double value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Crc)
}

// double Crs = 14;
inline void GpsEphemeris::clear_crs() {
  crs_ = 0;
}
inline double GpsEphemeris::_internal_crs() const {
  return crs_;
}
inline double GpsEphemeris::crs() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Crs)
  return _internal_crs();
}
inline void GpsEphemeris::_internal_set_crs(double value) {
  
  crs_ = value;
}
inline void GpsEphemeris::set_crs(double value) {
  _internal_set_crs(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Crs)
}

// double Cic = 15;
inline void GpsEphemeris::clear_cic() {
  cic_ = 0;
}
inline double GpsEphemeris::_internal_cic() const {
  return cic_;
}
inline double GpsEphemeris::cic() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Cic)
  return _internal_cic();
}
inline void GpsEphemeris::_internal_set_cic(double value) {
  
  cic_ = value;
}
inline void GpsEphemeris::set_cic(double value) {
  _internal_set_cic(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Cic)
}

// double Cis = 16;
inline void GpsEphemeris::clear_cis() {
  cis_ = 0;
}
inline double GpsEphemeris::_internal_cis() const {
  return cis_;
}
inline double GpsEphemeris::cis() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.Cis)
  return _internal_cis();
}
inline void GpsEphemeris::_internal_set_cis(double value) {
  
  cis_ = value;
}
inline void GpsEphemeris::set_cis(double value) {
  _internal_set_cis(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.Cis)
}

// int32 toe = 17;
inline void GpsEphemeris::clear_toe() {
  toe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_toe() const {
  return toe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::toe() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.toe)
  return _internal_toe();
}
inline void GpsEphemeris::_internal_set_toe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toe_ = value;
}
inline void GpsEphemeris::set_toe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toe(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.toe)
}

// int32 toc = 18;
inline void GpsEphemeris::clear_toc() {
  toc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_toc() const {
  return toc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::toc() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.toc)
  return _internal_toc();
}
inline void GpsEphemeris::_internal_set_toc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toc_ = value;
}
inline void GpsEphemeris::set_toc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toc(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.toc)
}

// double af0 = 19;
inline void GpsEphemeris::clear_af0() {
  af0_ = 0;
}
inline double GpsEphemeris::_internal_af0() const {
  return af0_;
}
inline double GpsEphemeris::af0() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.af0)
  return _internal_af0();
}
inline void GpsEphemeris::_internal_set_af0(double value) {
  
  af0_ = value;
}
inline void GpsEphemeris::set_af0(double value) {
  _internal_set_af0(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.af0)
}

// double af1 = 20;
inline void GpsEphemeris::clear_af1() {
  af1_ = 0;
}
inline double GpsEphemeris::_internal_af1() const {
  return af1_;
}
inline double GpsEphemeris::af1() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.af1)
  return _internal_af1();
}
inline void GpsEphemeris::_internal_set_af1(double value) {
  
  af1_ = value;
}
inline void GpsEphemeris::set_af1(double value) {
  _internal_set_af1(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.af1)
}

// double af2 = 21;
inline void GpsEphemeris::clear_af2() {
  af2_ = 0;
}
inline double GpsEphemeris::_internal_af2() const {
  return af2_;
}
inline double GpsEphemeris::af2() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.af2)
  return _internal_af2();
}
inline void GpsEphemeris::_internal_set_af2(double value) {
  
  af2_ = value;
}
inline void GpsEphemeris::set_af2(double value) {
  _internal_set_af2(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.af2)
}

// double satClkDrift = 22;
inline void GpsEphemeris::clear_satclkdrift() {
  satclkdrift_ = 0;
}
inline double GpsEphemeris::_internal_satclkdrift() const {
  return satclkdrift_;
}
inline double GpsEphemeris::satclkdrift() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.satClkDrift)
  return _internal_satclkdrift();
}
inline void GpsEphemeris::_internal_set_satclkdrift(double value) {
  
  satclkdrift_ = value;
}
inline void GpsEphemeris::set_satclkdrift(double value) {
  _internal_set_satclkdrift(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.satClkDrift)
}

// double dtr = 23;
inline void GpsEphemeris::clear_dtr() {
  dtr_ = 0;
}
inline double GpsEphemeris::_internal_dtr() const {
  return dtr_;
}
inline double GpsEphemeris::dtr() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.dtr)
  return _internal_dtr();
}
inline void GpsEphemeris::_internal_set_dtr(double value) {
  
  dtr_ = value;
}
inline void GpsEphemeris::set_dtr(double value) {
  _internal_set_dtr(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.dtr)
}

// int32 WN = 24;
inline void GpsEphemeris::clear_wn() {
  wn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_wn() const {
  return wn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::wn() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.WN)
  return _internal_wn();
}
inline void GpsEphemeris::_internal_set_wn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wn_ = value;
}
inline void GpsEphemeris::set_wn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wn(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.WN)
}

// int32 tow = 25;
inline void GpsEphemeris::clear_tow() {
  tow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_tow() const {
  return tow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::tow() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.tow)
  return _internal_tow();
}
inline void GpsEphemeris::_internal_set_tow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tow_ = value;
}
inline void GpsEphemeris::set_tow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tow(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.tow)
}

// int32 code_on_L2 = 26;
inline void GpsEphemeris::clear_code_on_l2() {
  code_on_l2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_code_on_l2() const {
  return code_on_l2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::code_on_l2() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.code_on_L2)
  return _internal_code_on_l2();
}
inline void GpsEphemeris::_internal_set_code_on_l2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_on_l2_ = value;
}
inline void GpsEphemeris::set_code_on_l2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code_on_l2(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.code_on_L2)
}

// bool L2_P_data_flag = 27;
inline void GpsEphemeris::clear_l2_p_data_flag() {
  l2_p_data_flag_ = false;
}
inline bool GpsEphemeris::_internal_l2_p_data_flag() const {
  return l2_p_data_flag_;
}
inline bool GpsEphemeris::l2_p_data_flag() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.L2_P_data_flag)
  return _internal_l2_p_data_flag();
}
inline void GpsEphemeris::_internal_set_l2_p_data_flag(bool value) {
  
  l2_p_data_flag_ = value;
}
inline void GpsEphemeris::set_l2_p_data_flag(bool value) {
  _internal_set_l2_p_data_flag(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.L2_P_data_flag)
}

// int32 SV_accuracy = 28;
inline void GpsEphemeris::clear_sv_accuracy() {
  sv_accuracy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_sv_accuracy() const {
  return sv_accuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::sv_accuracy() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.SV_accuracy)
  return _internal_sv_accuracy();
}
inline void GpsEphemeris::_internal_set_sv_accuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sv_accuracy_ = value;
}
inline void GpsEphemeris::set_sv_accuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sv_accuracy(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.SV_accuracy)
}

// int32 SV_health = 29;
inline void GpsEphemeris::clear_sv_health() {
  sv_health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_sv_health() const {
  return sv_health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::sv_health() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.SV_health)
  return _internal_sv_health();
}
inline void GpsEphemeris::_internal_set_sv_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sv_health_ = value;
}
inline void GpsEphemeris::set_sv_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sv_health(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.SV_health)
}

// double TGD = 30;
inline void GpsEphemeris::clear_tgd() {
  tgd_ = 0;
}
inline double GpsEphemeris::_internal_tgd() const {
  return tgd_;
}
inline double GpsEphemeris::tgd() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.TGD)
  return _internal_tgd();
}
inline void GpsEphemeris::_internal_set_tgd(double value) {
  
  tgd_ = value;
}
inline void GpsEphemeris::set_tgd(double value) {
  _internal_set_tgd(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.TGD)
}

// int32 IODC = 31;
inline void GpsEphemeris::clear_iodc() {
  iodc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_iodc() const {
  return iodc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::iodc() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.IODC)
  return _internal_iodc();
}
inline void GpsEphemeris::_internal_set_iodc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iodc_ = value;
}
inline void GpsEphemeris::set_iodc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iodc(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.IODC)
}

// int32 IODE_SF2 = 32;
inline void GpsEphemeris::clear_iode_sf2() {
  iode_sf2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_iode_sf2() const {
  return iode_sf2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::iode_sf2() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.IODE_SF2)
  return _internal_iode_sf2();
}
inline void GpsEphemeris::_internal_set_iode_sf2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iode_sf2_ = value;
}
inline void GpsEphemeris::set_iode_sf2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iode_sf2(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.IODE_SF2)
}

// int32 IODE_SF3 = 33;
inline void GpsEphemeris::clear_iode_sf3() {
  iode_sf3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_iode_sf3() const {
  return iode_sf3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::iode_sf3() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.IODE_SF3)
  return _internal_iode_sf3();
}
inline void GpsEphemeris::_internal_set_iode_sf3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iode_sf3_ = value;
}
inline void GpsEphemeris::set_iode_sf3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iode_sf3(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.IODE_SF3)
}

// int32 AODO = 34;
inline void GpsEphemeris::clear_aodo() {
  aodo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::_internal_aodo() const {
  return aodo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsEphemeris::aodo() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.AODO)
  return _internal_aodo();
}
inline void GpsEphemeris::_internal_set_aodo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aodo_ = value;
}
inline void GpsEphemeris::set_aodo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aodo(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.AODO)
}

// bool fit_interval_flag = 35;
inline void GpsEphemeris::clear_fit_interval_flag() {
  fit_interval_flag_ = false;
}
inline bool GpsEphemeris::_internal_fit_interval_flag() const {
  return fit_interval_flag_;
}
inline bool GpsEphemeris::fit_interval_flag() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.fit_interval_flag)
  return _internal_fit_interval_flag();
}
inline void GpsEphemeris::_internal_set_fit_interval_flag(bool value) {
  
  fit_interval_flag_ = value;
}
inline void GpsEphemeris::set_fit_interval_flag(bool value) {
  _internal_set_fit_interval_flag(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.fit_interval_flag)
}

// double spare1 = 36;
inline void GpsEphemeris::clear_spare1() {
  spare1_ = 0;
}
inline double GpsEphemeris::_internal_spare1() const {
  return spare1_;
}
inline double GpsEphemeris::spare1() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.spare1)
  return _internal_spare1();
}
inline void GpsEphemeris::_internal_set_spare1(double value) {
  
  spare1_ = value;
}
inline void GpsEphemeris::set_spare1(double value) {
  _internal_set_spare1(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.spare1)
}

// double spare2 = 37;
inline void GpsEphemeris::clear_spare2() {
  spare2_ = 0;
}
inline double GpsEphemeris::_internal_spare2() const {
  return spare2_;
}
inline double GpsEphemeris::spare2() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.spare2)
  return _internal_spare2();
}
inline void GpsEphemeris::_internal_set_spare2(double value) {
  
  spare2_ = value;
}
inline void GpsEphemeris::set_spare2(double value) {
  _internal_set_spare2(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.spare2)
}

// bool integrity_status_flag = 38;
inline void GpsEphemeris::clear_integrity_status_flag() {
  integrity_status_flag_ = false;
}
inline bool GpsEphemeris::_internal_integrity_status_flag() const {
  return integrity_status_flag_;
}
inline bool GpsEphemeris::integrity_status_flag() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.integrity_status_flag)
  return _internal_integrity_status_flag();
}
inline void GpsEphemeris::_internal_set_integrity_status_flag(bool value) {
  
  integrity_status_flag_ = value;
}
inline void GpsEphemeris::set_integrity_status_flag(bool value) {
  _internal_set_integrity_status_flag(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.integrity_status_flag)
}

// bool alert_flag = 39;
inline void GpsEphemeris::clear_alert_flag() {
  alert_flag_ = false;
}
inline bool GpsEphemeris::_internal_alert_flag() const {
  return alert_flag_;
}
inline bool GpsEphemeris::alert_flag() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.alert_flag)
  return _internal_alert_flag();
}
inline void GpsEphemeris::_internal_set_alert_flag(bool value) {
  
  alert_flag_ = value;
}
inline void GpsEphemeris::set_alert_flag(bool value) {
  _internal_set_alert_flag(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.alert_flag)
}

// bool antispoofing_flag = 40;
inline void GpsEphemeris::clear_antispoofing_flag() {
  antispoofing_flag_ = false;
}
inline bool GpsEphemeris::_internal_antispoofing_flag() const {
  return antispoofing_flag_;
}
inline bool GpsEphemeris::antispoofing_flag() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GpsEphemeris.antispoofing_flag)
  return _internal_antispoofing_flag();
}
inline void GpsEphemeris::_internal_set_antispoofing_flag(bool value) {
  
  antispoofing_flag_ = value;
}
inline void GpsEphemeris::set_antispoofing_flag(bool value) {
  _internal_set_antispoofing_flag(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GpsEphemeris.antispoofing_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_sdr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gps_5fephemeris_2eproto
