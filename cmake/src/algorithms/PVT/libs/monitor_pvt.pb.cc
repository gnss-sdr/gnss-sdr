// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_pvt.proto

#include "monitor_pvt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gnss_sdr {
class MonitorPvtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorPvt> _instance;
} _MonitorPvt_default_instance_;
}  // namespace gnss_sdr
static void InitDefaultsscc_info_MonitorPvt_monitor_5fpvt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_MonitorPvt_default_instance_;
    new (ptr) ::gnss_sdr::MonitorPvt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::MonitorPvt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorPvt_monitor_5fpvt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonitorPvt_monitor_5fpvt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_monitor_5fpvt_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_monitor_5fpvt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_monitor_5fpvt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_monitor_5fpvt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, tow_at_current_symbol_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, week_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, rx_time_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, user_clk_offset_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_x_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_y_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_z_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_x_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_y_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_z_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_xx_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_yy_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_zz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_xy_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_yz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_zx_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, latitude_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, longitude_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, height_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, valid_sats_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, solution_status_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, solution_type_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, ar_ratio_factor_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, ar_ratio_threshold_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, gdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, hdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, user_clk_drift_ppm_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, utc_time_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_e_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_n_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_u_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cog_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, galhas_status_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, geohash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_sdr::MonitorPvt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnss_sdr::_MonitorPvt_default_instance_),
};

const char descriptor_table_protodef_monitor_5fpvt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021monitor_pvt.proto\022\010gnss_sdr\"\226\005\n\nMonito"
  "rPvt\022 \n\030tow_at_current_symbol_ms\030\001 \001(\r\022\014"
  "\n\004week\030\002 \001(\r\022\017\n\007rx_time\030\003 \001(\001\022\027\n\017user_cl"
  "k_offset\030\004 \001(\001\022\r\n\005pos_x\030\005 \001(\001\022\r\n\005pos_y\030\006"
  " \001(\001\022\r\n\005pos_z\030\007 \001(\001\022\r\n\005vel_x\030\010 \001(\001\022\r\n\005ve"
  "l_y\030\t \001(\001\022\r\n\005vel_z\030\n \001(\001\022\016\n\006cov_xx\030\013 \001(\001"
  "\022\016\n\006cov_yy\030\014 \001(\001\022\016\n\006cov_zz\030\r \001(\001\022\016\n\006cov_"
  "xy\030\016 \001(\001\022\016\n\006cov_yz\030\017 \001(\001\022\016\n\006cov_zx\030\020 \001(\001"
  "\022\020\n\010latitude\030\021 \001(\001\022\021\n\tlongitude\030\022 \001(\001\022\016\n"
  "\006height\030\023 \001(\001\022\022\n\nvalid_sats\030\024 \001(\r\022\027\n\017sol"
  "ution_status\030\025 \001(\r\022\025\n\rsolution_type\030\026 \001("
  "\r\022\027\n\017ar_ratio_factor\030\027 \001(\002\022\032\n\022ar_ratio_t"
  "hreshold\030\030 \001(\002\022\014\n\004gdop\030\031 \001(\001\022\014\n\004pdop\030\032 \001"
  "(\001\022\014\n\004hdop\030\033 \001(\001\022\014\n\004vdop\030\034 \001(\001\022\032\n\022user_c"
  "lk_drift_ppm\030\035 \001(\001\022\020\n\010utc_time\030\036 \001(\t\022\r\n\005"
  "vel_e\030\037 \001(\001\022\r\n\005vel_n\030  \001(\001\022\r\n\005vel_u\030! \001("
  "\001\022\013\n\003cog\030\" \001(\001\022\025\n\rgalhas_status\030# \001(\r\022\017\n"
  "\007geohash\030$ \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_monitor_5fpvt_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_monitor_5fpvt_2eproto_sccs[1] = {
  &scc_info_MonitorPvt_monitor_5fpvt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_monitor_5fpvt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_monitor_5fpvt_2eproto = {
  false, false, descriptor_table_protodef_monitor_5fpvt_2eproto, "monitor_pvt.proto", 702,
  &descriptor_table_monitor_5fpvt_2eproto_once, descriptor_table_monitor_5fpvt_2eproto_sccs, descriptor_table_monitor_5fpvt_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_monitor_5fpvt_2eproto::offsets,
  file_level_metadata_monitor_5fpvt_2eproto, 1, file_level_enum_descriptors_monitor_5fpvt_2eproto, file_level_service_descriptors_monitor_5fpvt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_monitor_5fpvt_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_monitor_5fpvt_2eproto)), true);
namespace gnss_sdr {

// ===================================================================

void MonitorPvt::InitAsDefaultInstance() {
}
class MonitorPvt::_Internal {
 public:
};

MonitorPvt::MonitorPvt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.MonitorPvt)
}
MonitorPvt::MonitorPvt(const MonitorPvt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utc_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utc_time().empty()) {
    utc_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_utc_time(),
      GetArena());
  }
  geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash().empty()) {
    geohash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_geohash(),
      GetArena());
  }
  ::memcpy(&tow_at_current_symbol_ms_, &from.tow_at_current_symbol_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&cog_) -
    reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(cog_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.MonitorPvt)
}

void MonitorPvt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorPvt_monitor_5fpvt_2eproto.base);
  utc_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tow_at_current_symbol_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cog_) -
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(cog_));
}

MonitorPvt::~MonitorPvt() {
  // @@protoc_insertion_point(destructor:gnss_sdr.MonitorPvt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonitorPvt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  utc_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MonitorPvt::ArenaDtor(void* object) {
  MonitorPvt* _this = reinterpret_cast< MonitorPvt* >(object);
  (void)_this;
}
void MonitorPvt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonitorPvt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorPvt& MonitorPvt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorPvt_monitor_5fpvt_2eproto.base);
  return *internal_default_instance();
}


void MonitorPvt::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.MonitorPvt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utc_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tow_at_current_symbol_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cog_) -
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(cog_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorPvt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tow_at_current_symbol_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tow_at_current_symbol_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rx_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double user_clk_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          user_clk_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          vel_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          cov_xx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          cov_yy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          cov_zz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          cov_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          cov_yz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          cov_zx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 valid_sats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          valid_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 solution_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 solution_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          solution_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ar_ratio_factor = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          ar_ratio_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ar_ratio_threshold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          ar_ratio_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double gdop = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          gdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pdop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double hdop = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vdop = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double user_clk_drift_ppm = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          user_clk_drift_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string utc_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_utc_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.MonitorPvt.utc_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double vel_e = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          vel_e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_n = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          vel_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_u = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          vel_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cog = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 galhas_status = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          galhas_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_geohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.MonitorPvt.geohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorPvt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.MonitorPvt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tow_at_current_symbol_ms = 1;
  if (this->tow_at_current_symbol_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tow_at_current_symbol_ms(), target);
  }

  // uint32 week = 2;
  if (this->week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_week(), target);
  }

  // double rx_time = 3;
  if (!(this->rx_time() <= 0 && this->rx_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rx_time(), target);
  }

  // double user_clk_offset = 4;
  if (!(this->user_clk_offset() <= 0 && this->user_clk_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_user_clk_offset(), target);
  }

  // double pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pos_x(), target);
  }

  // double pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pos_y(), target);
  }

  // double pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pos_z(), target);
  }

  // double vel_x = 8;
  if (!(this->vel_x() <= 0 && this->vel_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_vel_x(), target);
  }

  // double vel_y = 9;
  if (!(this->vel_y() <= 0 && this->vel_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vel_y(), target);
  }

  // double vel_z = 10;
  if (!(this->vel_z() <= 0 && this->vel_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_vel_z(), target);
  }

  // double cov_xx = 11;
  if (!(this->cov_xx() <= 0 && this->cov_xx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_cov_xx(), target);
  }

  // double cov_yy = 12;
  if (!(this->cov_yy() <= 0 && this->cov_yy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_cov_yy(), target);
  }

  // double cov_zz = 13;
  if (!(this->cov_zz() <= 0 && this->cov_zz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_cov_zz(), target);
  }

  // double cov_xy = 14;
  if (!(this->cov_xy() <= 0 && this->cov_xy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_cov_xy(), target);
  }

  // double cov_yz = 15;
  if (!(this->cov_yz() <= 0 && this->cov_yz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_cov_yz(), target);
  }

  // double cov_zx = 16;
  if (!(this->cov_zx() <= 0 && this->cov_zx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_cov_zx(), target);
  }

  // double latitude = 17;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_latitude(), target);
  }

  // double longitude = 18;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_longitude(), target);
  }

  // double height = 19;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_height(), target);
  }

  // uint32 valid_sats = 20;
  if (this->valid_sats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_valid_sats(), target);
  }

  // uint32 solution_status = 21;
  if (this->solution_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_solution_status(), target);
  }

  // uint32 solution_type = 22;
  if (this->solution_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_solution_type(), target);
  }

  // float ar_ratio_factor = 23;
  if (!(this->ar_ratio_factor() <= 0 && this->ar_ratio_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_ar_ratio_factor(), target);
  }

  // float ar_ratio_threshold = 24;
  if (!(this->ar_ratio_threshold() <= 0 && this->ar_ratio_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_ar_ratio_threshold(), target);
  }

  // double gdop = 25;
  if (!(this->gdop() <= 0 && this->gdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_gdop(), target);
  }

  // double pdop = 26;
  if (!(this->pdop() <= 0 && this->pdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_pdop(), target);
  }

  // double hdop = 27;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_hdop(), target);
  }

  // double vdop = 28;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_vdop(), target);
  }

  // double user_clk_drift_ppm = 29;
  if (!(this->user_clk_drift_ppm() <= 0 && this->user_clk_drift_ppm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_user_clk_drift_ppm(), target);
  }

  // string utc_time = 30;
  if (this->utc_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utc_time().data(), static_cast<int>(this->_internal_utc_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.MonitorPvt.utc_time");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_utc_time(), target);
  }

  // double vel_e = 31;
  if (!(this->vel_e() <= 0 && this->vel_e() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_vel_e(), target);
  }

  // double vel_n = 32;
  if (!(this->vel_n() <= 0 && this->vel_n() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_vel_n(), target);
  }

  // double vel_u = 33;
  if (!(this->vel_u() <= 0 && this->vel_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_vel_u(), target);
  }

  // double cog = 34;
  if (!(this->cog() <= 0 && this->cog() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_cog(), target);
  }

  // uint32 galhas_status = 35;
  if (this->galhas_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_galhas_status(), target);
  }

  // string geohash = 36;
  if (this->geohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash().data(), static_cast<int>(this->_internal_geohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.MonitorPvt.geohash");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_geohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.MonitorPvt)
  return target;
}

size_t MonitorPvt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.MonitorPvt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string utc_time = 30;
  if (this->utc_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utc_time());
  }

  // string geohash = 36;
  if (this->geohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash());
  }

  // uint32 tow_at_current_symbol_ms = 1;
  if (this->tow_at_current_symbol_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tow_at_current_symbol_ms());
  }

  // uint32 week = 2;
  if (this->week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_week());
  }

  // double rx_time = 3;
  if (!(this->rx_time() <= 0 && this->rx_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double user_clk_offset = 4;
  if (!(this->user_clk_offset() <= 0 && this->user_clk_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel_x = 8;
  if (!(this->vel_x() <= 0 && this->vel_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel_y = 9;
  if (!(this->vel_y() <= 0 && this->vel_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel_z = 10;
  if (!(this->vel_z() <= 0 && this->vel_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xx = 11;
  if (!(this->cov_xx() <= 0 && this->cov_xx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yy = 12;
  if (!(this->cov_yy() <= 0 && this->cov_yy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zz = 13;
  if (!(this->cov_zz() <= 0 && this->cov_zz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xy = 14;
  if (!(this->cov_xy() <= 0 && this->cov_xy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yz = 15;
  if (!(this->cov_yz() <= 0 && this->cov_yz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zx = 16;
  if (!(this->cov_zx() <= 0 && this->cov_zx() >= 0)) {
    total_size += 2 + 8;
  }

  // double latitude = 17;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 2 + 8;
  }

  // double longitude = 18;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 2 + 8;
  }

  // double height = 19;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 valid_sats = 20;
  if (this->valid_sats() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_valid_sats());
  }

  // uint32 solution_status = 21;
  if (this->solution_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solution_status());
  }

  // uint32 solution_type = 22;
  if (this->solution_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solution_type());
  }

  // float ar_ratio_factor = 23;
  if (!(this->ar_ratio_factor() <= 0 && this->ar_ratio_factor() >= 0)) {
    total_size += 2 + 4;
  }

  // double gdop = 25;
  if (!(this->gdop() <= 0 && this->gdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double pdop = 26;
  if (!(this->pdop() <= 0 && this->pdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double hdop = 27;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double vdop = 28;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double user_clk_drift_ppm = 29;
  if (!(this->user_clk_drift_ppm() <= 0 && this->user_clk_drift_ppm() >= 0)) {
    total_size += 2 + 8;
  }

  // float ar_ratio_threshold = 24;
  if (!(this->ar_ratio_threshold() <= 0 && this->ar_ratio_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 galhas_status = 35;
  if (this->galhas_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_galhas_status());
  }

  // double vel_e = 31;
  if (!(this->vel_e() <= 0 && this->vel_e() >= 0)) {
    total_size += 2 + 8;
  }

  // double vel_n = 32;
  if (!(this->vel_n() <= 0 && this->vel_n() >= 0)) {
    total_size += 2 + 8;
  }

  // double vel_u = 33;
  if (!(this->vel_u() <= 0 && this->vel_u() >= 0)) {
    total_size += 2 + 8;
  }

  // double cog = 34;
  if (!(this->cog() <= 0 && this->cog() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorPvt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.MonitorPvt)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorPvt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorPvt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.MonitorPvt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.MonitorPvt)
    MergeFrom(*source);
  }
}

void MonitorPvt::MergeFrom(const MonitorPvt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.MonitorPvt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utc_time().size() > 0) {
    _internal_set_utc_time(from._internal_utc_time());
  }
  if (from.geohash().size() > 0) {
    _internal_set_geohash(from._internal_geohash());
  }
  if (from.tow_at_current_symbol_ms() != 0) {
    _internal_set_tow_at_current_symbol_ms(from._internal_tow_at_current_symbol_ms());
  }
  if (from.week() != 0) {
    _internal_set_week(from._internal_week());
  }
  if (!(from.rx_time() <= 0 && from.rx_time() >= 0)) {
    _internal_set_rx_time(from._internal_rx_time());
  }
  if (!(from.user_clk_offset() <= 0 && from.user_clk_offset() >= 0)) {
    _internal_set_user_clk_offset(from._internal_user_clk_offset());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
  if (!(from.vel_x() <= 0 && from.vel_x() >= 0)) {
    _internal_set_vel_x(from._internal_vel_x());
  }
  if (!(from.vel_y() <= 0 && from.vel_y() >= 0)) {
    _internal_set_vel_y(from._internal_vel_y());
  }
  if (!(from.vel_z() <= 0 && from.vel_z() >= 0)) {
    _internal_set_vel_z(from._internal_vel_z());
  }
  if (!(from.cov_xx() <= 0 && from.cov_xx() >= 0)) {
    _internal_set_cov_xx(from._internal_cov_xx());
  }
  if (!(from.cov_yy() <= 0 && from.cov_yy() >= 0)) {
    _internal_set_cov_yy(from._internal_cov_yy());
  }
  if (!(from.cov_zz() <= 0 && from.cov_zz() >= 0)) {
    _internal_set_cov_zz(from._internal_cov_zz());
  }
  if (!(from.cov_xy() <= 0 && from.cov_xy() >= 0)) {
    _internal_set_cov_xy(from._internal_cov_xy());
  }
  if (!(from.cov_yz() <= 0 && from.cov_yz() >= 0)) {
    _internal_set_cov_yz(from._internal_cov_yz());
  }
  if (!(from.cov_zx() <= 0 && from.cov_zx() >= 0)) {
    _internal_set_cov_zx(from._internal_cov_zx());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.valid_sats() != 0) {
    _internal_set_valid_sats(from._internal_valid_sats());
  }
  if (from.solution_status() != 0) {
    _internal_set_solution_status(from._internal_solution_status());
  }
  if (from.solution_type() != 0) {
    _internal_set_solution_type(from._internal_solution_type());
  }
  if (!(from.ar_ratio_factor() <= 0 && from.ar_ratio_factor() >= 0)) {
    _internal_set_ar_ratio_factor(from._internal_ar_ratio_factor());
  }
  if (!(from.gdop() <= 0 && from.gdop() >= 0)) {
    _internal_set_gdop(from._internal_gdop());
  }
  if (!(from.pdop() <= 0 && from.pdop() >= 0)) {
    _internal_set_pdop(from._internal_pdop());
  }
  if (!(from.hdop() <= 0 && from.hdop() >= 0)) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (!(from.vdop() <= 0 && from.vdop() >= 0)) {
    _internal_set_vdop(from._internal_vdop());
  }
  if (!(from.user_clk_drift_ppm() <= 0 && from.user_clk_drift_ppm() >= 0)) {
    _internal_set_user_clk_drift_ppm(from._internal_user_clk_drift_ppm());
  }
  if (!(from.ar_ratio_threshold() <= 0 && from.ar_ratio_threshold() >= 0)) {
    _internal_set_ar_ratio_threshold(from._internal_ar_ratio_threshold());
  }
  if (from.galhas_status() != 0) {
    _internal_set_galhas_status(from._internal_galhas_status());
  }
  if (!(from.vel_e() <= 0 && from.vel_e() >= 0)) {
    _internal_set_vel_e(from._internal_vel_e());
  }
  if (!(from.vel_n() <= 0 && from.vel_n() >= 0)) {
    _internal_set_vel_n(from._internal_vel_n());
  }
  if (!(from.vel_u() <= 0 && from.vel_u() >= 0)) {
    _internal_set_vel_u(from._internal_vel_u());
  }
  if (!(from.cog() <= 0 && from.cog() >= 0)) {
    _internal_set_cog(from._internal_cog());
  }
}

void MonitorPvt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.MonitorPvt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorPvt::CopyFrom(const MonitorPvt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.MonitorPvt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorPvt::IsInitialized() const {
  return true;
}

void MonitorPvt::InternalSwap(MonitorPvt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utc_time_.Swap(&other->utc_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash_.Swap(&other->geohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorPvt, cog_)
      + sizeof(MonitorPvt::cog_)
      - PROTOBUF_FIELD_OFFSET(MonitorPvt, tow_at_current_symbol_ms_)>(
          reinterpret_cast<char*>(&tow_at_current_symbol_ms_),
          reinterpret_cast<char*>(&other->tow_at_current_symbol_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorPvt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnss_sdr::MonitorPvt* Arena::CreateMaybeMessage< ::gnss_sdr::MonitorPvt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::MonitorPvt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
