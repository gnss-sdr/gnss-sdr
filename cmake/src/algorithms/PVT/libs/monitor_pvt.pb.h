// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_pvt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_monitor_5fpvt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_monitor_5fpvt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_monitor_5fpvt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_monitor_5fpvt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_monitor_5fpvt_2eproto;
namespace gnss_sdr {
class MonitorPvt;
class MonitorPvtDefaultTypeInternal;
extern MonitorPvtDefaultTypeInternal _MonitorPvt_default_instance_;
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> ::gnss_sdr::MonitorPvt* Arena::CreateMaybeMessage<::gnss_sdr::MonitorPvt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gnss_sdr {

// ===================================================================

class MonitorPvt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.MonitorPvt) */ {
 public:
  inline MonitorPvt() : MonitorPvt(nullptr) {};
  virtual ~MonitorPvt();

  MonitorPvt(const MonitorPvt& from);
  MonitorPvt(MonitorPvt&& from) noexcept
    : MonitorPvt() {
    *this = ::std::move(from);
  }

  inline MonitorPvt& operator=(const MonitorPvt& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorPvt& operator=(MonitorPvt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorPvt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorPvt* internal_default_instance() {
    return reinterpret_cast<const MonitorPvt*>(
               &_MonitorPvt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonitorPvt& a, MonitorPvt& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorPvt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorPvt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorPvt* New() const final {
    return CreateMaybeMessage<MonitorPvt>(nullptr);
  }

  MonitorPvt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorPvt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorPvt& from);
  void MergeFrom(const MonitorPvt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorPvt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnss_sdr.MonitorPvt";
  }
  protected:
  explicit MonitorPvt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_monitor_5fpvt_2eproto);
    return ::descriptor_table_monitor_5fpvt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtcTimeFieldNumber = 30,
    kGeohashFieldNumber = 36,
    kTowAtCurrentSymbolMsFieldNumber = 1,
    kWeekFieldNumber = 2,
    kRxTimeFieldNumber = 3,
    kUserClkOffsetFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
    kVelXFieldNumber = 8,
    kVelYFieldNumber = 9,
    kVelZFieldNumber = 10,
    kCovXxFieldNumber = 11,
    kCovYyFieldNumber = 12,
    kCovZzFieldNumber = 13,
    kCovXyFieldNumber = 14,
    kCovYzFieldNumber = 15,
    kCovZxFieldNumber = 16,
    kLatitudeFieldNumber = 17,
    kLongitudeFieldNumber = 18,
    kHeightFieldNumber = 19,
    kValidSatsFieldNumber = 20,
    kSolutionStatusFieldNumber = 21,
    kSolutionTypeFieldNumber = 22,
    kArRatioFactorFieldNumber = 23,
    kGdopFieldNumber = 25,
    kPdopFieldNumber = 26,
    kHdopFieldNumber = 27,
    kVdopFieldNumber = 28,
    kUserClkDriftPpmFieldNumber = 29,
    kArRatioThresholdFieldNumber = 24,
    kGalhasStatusFieldNumber = 35,
    kVelEFieldNumber = 31,
    kVelNFieldNumber = 32,
    kVelUFieldNumber = 33,
    kCogFieldNumber = 34,
  };
  // string utc_time = 30;
  void clear_utc_time();
  const std::string& utc_time() const;
  void set_utc_time(const std::string& value);
  void set_utc_time(std::string&& value);
  void set_utc_time(const char* value);
  void set_utc_time(const char* value, size_t size);
  std::string* mutable_utc_time();
  std::string* release_utc_time();
  void set_allocated_utc_time(std::string* utc_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_utc_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_utc_time(
      std::string* utc_time);
  private:
  const std::string& _internal_utc_time() const;
  void _internal_set_utc_time(const std::string& value);
  std::string* _internal_mutable_utc_time();
  public:

  // string geohash = 36;
  void clear_geohash();
  const std::string& geohash() const;
  void set_geohash(const std::string& value);
  void set_geohash(std::string&& value);
  void set_geohash(const char* value);
  void set_geohash(const char* value, size_t size);
  std::string* mutable_geohash();
  std::string* release_geohash();
  void set_allocated_geohash(std::string* geohash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geohash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geohash(
      std::string* geohash);
  private:
  const std::string& _internal_geohash() const;
  void _internal_set_geohash(const std::string& value);
  std::string* _internal_mutable_geohash();
  public:

  // uint32 tow_at_current_symbol_ms = 1;
  void clear_tow_at_current_symbol_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 tow_at_current_symbol_ms() const;
  void set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tow_at_current_symbol_ms() const;
  void _internal_set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 week = 2;
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double rx_time = 3;
  void clear_rx_time();
  double rx_time() const;
  void set_rx_time(double value);
  private:
  double _internal_rx_time() const;
  void _internal_set_rx_time(double value);
  public:

  // double user_clk_offset = 4;
  void clear_user_clk_offset();
  double user_clk_offset() const;
  void set_user_clk_offset(double value);
  private:
  double _internal_user_clk_offset() const;
  void _internal_set_user_clk_offset(double value);
  public:

  // double pos_x = 5;
  void clear_pos_x();
  double pos_x() const;
  void set_pos_x(double value);
  private:
  double _internal_pos_x() const;
  void _internal_set_pos_x(double value);
  public:

  // double pos_y = 6;
  void clear_pos_y();
  double pos_y() const;
  void set_pos_y(double value);
  private:
  double _internal_pos_y() const;
  void _internal_set_pos_y(double value);
  public:

  // double pos_z = 7;
  void clear_pos_z();
  double pos_z() const;
  void set_pos_z(double value);
  private:
  double _internal_pos_z() const;
  void _internal_set_pos_z(double value);
  public:

  // double vel_x = 8;
  void clear_vel_x();
  double vel_x() const;
  void set_vel_x(double value);
  private:
  double _internal_vel_x() const;
  void _internal_set_vel_x(double value);
  public:

  // double vel_y = 9;
  void clear_vel_y();
  double vel_y() const;
  void set_vel_y(double value);
  private:
  double _internal_vel_y() const;
  void _internal_set_vel_y(double value);
  public:

  // double vel_z = 10;
  void clear_vel_z();
  double vel_z() const;
  void set_vel_z(double value);
  private:
  double _internal_vel_z() const;
  void _internal_set_vel_z(double value);
  public:

  // double cov_xx = 11;
  void clear_cov_xx();
  double cov_xx() const;
  void set_cov_xx(double value);
  private:
  double _internal_cov_xx() const;
  void _internal_set_cov_xx(double value);
  public:

  // double cov_yy = 12;
  void clear_cov_yy();
  double cov_yy() const;
  void set_cov_yy(double value);
  private:
  double _internal_cov_yy() const;
  void _internal_set_cov_yy(double value);
  public:

  // double cov_zz = 13;
  void clear_cov_zz();
  double cov_zz() const;
  void set_cov_zz(double value);
  private:
  double _internal_cov_zz() const;
  void _internal_set_cov_zz(double value);
  public:

  // double cov_xy = 14;
  void clear_cov_xy();
  double cov_xy() const;
  void set_cov_xy(double value);
  private:
  double _internal_cov_xy() const;
  void _internal_set_cov_xy(double value);
  public:

  // double cov_yz = 15;
  void clear_cov_yz();
  double cov_yz() const;
  void set_cov_yz(double value);
  private:
  double _internal_cov_yz() const;
  void _internal_set_cov_yz(double value);
  public:

  // double cov_zx = 16;
  void clear_cov_zx();
  double cov_zx() const;
  void set_cov_zx(double value);
  private:
  double _internal_cov_zx() const;
  void _internal_set_cov_zx(double value);
  public:

  // double latitude = 17;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 18;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double height = 19;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // uint32 valid_sats = 20;
  void clear_valid_sats();
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_sats() const;
  void set_valid_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valid_sats() const;
  void _internal_set_valid_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 solution_status = 21;
  void clear_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status() const;
  void set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_status() const;
  void _internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 solution_type = 22;
  void clear_solution_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_type() const;
  void set_solution_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_type() const;
  void _internal_set_solution_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float ar_ratio_factor = 23;
  void clear_ar_ratio_factor();
  float ar_ratio_factor() const;
  void set_ar_ratio_factor(float value);
  private:
  float _internal_ar_ratio_factor() const;
  void _internal_set_ar_ratio_factor(float value);
  public:

  // double gdop = 25;
  void clear_gdop();
  double gdop() const;
  void set_gdop(double value);
  private:
  double _internal_gdop() const;
  void _internal_set_gdop(double value);
  public:

  // double pdop = 26;
  void clear_pdop();
  double pdop() const;
  void set_pdop(double value);
  private:
  double _internal_pdop() const;
  void _internal_set_pdop(double value);
  public:

  // double hdop = 27;
  void clear_hdop();
  double hdop() const;
  void set_hdop(double value);
  private:
  double _internal_hdop() const;
  void _internal_set_hdop(double value);
  public:

  // double vdop = 28;
  void clear_vdop();
  double vdop() const;
  void set_vdop(double value);
  private:
  double _internal_vdop() const;
  void _internal_set_vdop(double value);
  public:

  // double user_clk_drift_ppm = 29;
  void clear_user_clk_drift_ppm();
  double user_clk_drift_ppm() const;
  void set_user_clk_drift_ppm(double value);
  private:
  double _internal_user_clk_drift_ppm() const;
  void _internal_set_user_clk_drift_ppm(double value);
  public:

  // float ar_ratio_threshold = 24;
  void clear_ar_ratio_threshold();
  float ar_ratio_threshold() const;
  void set_ar_ratio_threshold(float value);
  private:
  float _internal_ar_ratio_threshold() const;
  void _internal_set_ar_ratio_threshold(float value);
  public:

  // uint32 galhas_status = 35;
  void clear_galhas_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 galhas_status() const;
  void set_galhas_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_galhas_status() const;
  void _internal_set_galhas_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double vel_e = 31;
  void clear_vel_e();
  double vel_e() const;
  void set_vel_e(double value);
  private:
  double _internal_vel_e() const;
  void _internal_set_vel_e(double value);
  public:

  // double vel_n = 32;
  void clear_vel_n();
  double vel_n() const;
  void set_vel_n(double value);
  private:
  double _internal_vel_n() const;
  void _internal_set_vel_n(double value);
  public:

  // double vel_u = 33;
  void clear_vel_u();
  double vel_u() const;
  void set_vel_u(double value);
  private:
  double _internal_vel_u() const;
  void _internal_set_vel_u(double value);
  public:

  // double cog = 34;
  void clear_cog();
  double cog() const;
  void set_cog(double value);
  private:
  double _internal_cog() const;
  void _internal_set_cog(double value);
  public:

  // @@protoc_insertion_point(class_scope:gnss_sdr.MonitorPvt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utc_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tow_at_current_symbol_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  double rx_time_;
  double user_clk_offset_;
  double pos_x_;
  double pos_y_;
  double pos_z_;
  double vel_x_;
  double vel_y_;
  double vel_z_;
  double cov_xx_;
  double cov_yy_;
  double cov_zz_;
  double cov_xy_;
  double cov_yz_;
  double cov_zx_;
  double latitude_;
  double longitude_;
  double height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_sats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_type_;
  float ar_ratio_factor_;
  double gdop_;
  double pdop_;
  double hdop_;
  double vdop_;
  double user_clk_drift_ppm_;
  float ar_ratio_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 galhas_status_;
  double vel_e_;
  double vel_n_;
  double vel_u_;
  double cog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_monitor_5fpvt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonitorPvt

// uint32 tow_at_current_symbol_ms = 1;
inline void MonitorPvt::clear_tow_at_current_symbol_ms() {
  tow_at_current_symbol_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_tow_at_current_symbol_ms() const {
  return tow_at_current_symbol_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::tow_at_current_symbol_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.tow_at_current_symbol_ms)
  return _internal_tow_at_current_symbol_ms();
}
inline void MonitorPvt::_internal_set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tow_at_current_symbol_ms_ = value;
}
inline void MonitorPvt::set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tow_at_current_symbol_ms(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.tow_at_current_symbol_ms)
}

// uint32 week = 2;
inline void MonitorPvt::clear_week() {
  week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::week() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.week)
  return _internal_week();
}
inline void MonitorPvt::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  week_ = value;
}
inline void MonitorPvt::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.week)
}

// double rx_time = 3;
inline void MonitorPvt::clear_rx_time() {
  rx_time_ = 0;
}
inline double MonitorPvt::_internal_rx_time() const {
  return rx_time_;
}
inline double MonitorPvt::rx_time() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.rx_time)
  return _internal_rx_time();
}
inline void MonitorPvt::_internal_set_rx_time(double value) {
  
  rx_time_ = value;
}
inline void MonitorPvt::set_rx_time(double value) {
  _internal_set_rx_time(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.rx_time)
}

// double user_clk_offset = 4;
inline void MonitorPvt::clear_user_clk_offset() {
  user_clk_offset_ = 0;
}
inline double MonitorPvt::_internal_user_clk_offset() const {
  return user_clk_offset_;
}
inline double MonitorPvt::user_clk_offset() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.user_clk_offset)
  return _internal_user_clk_offset();
}
inline void MonitorPvt::_internal_set_user_clk_offset(double value) {
  
  user_clk_offset_ = value;
}
inline void MonitorPvt::set_user_clk_offset(double value) {
  _internal_set_user_clk_offset(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.user_clk_offset)
}

// double pos_x = 5;
inline void MonitorPvt::clear_pos_x() {
  pos_x_ = 0;
}
inline double MonitorPvt::_internal_pos_x() const {
  return pos_x_;
}
inline double MonitorPvt::pos_x() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_x)
  return _internal_pos_x();
}
inline void MonitorPvt::_internal_set_pos_x(double value) {
  
  pos_x_ = value;
}
inline void MonitorPvt::set_pos_x(double value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_x)
}

// double pos_y = 6;
inline void MonitorPvt::clear_pos_y() {
  pos_y_ = 0;
}
inline double MonitorPvt::_internal_pos_y() const {
  return pos_y_;
}
inline double MonitorPvt::pos_y() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_y)
  return _internal_pos_y();
}
inline void MonitorPvt::_internal_set_pos_y(double value) {
  
  pos_y_ = value;
}
inline void MonitorPvt::set_pos_y(double value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_y)
}

// double pos_z = 7;
inline void MonitorPvt::clear_pos_z() {
  pos_z_ = 0;
}
inline double MonitorPvt::_internal_pos_z() const {
  return pos_z_;
}
inline double MonitorPvt::pos_z() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_z)
  return _internal_pos_z();
}
inline void MonitorPvt::_internal_set_pos_z(double value) {
  
  pos_z_ = value;
}
inline void MonitorPvt::set_pos_z(double value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_z)
}

// double vel_x = 8;
inline void MonitorPvt::clear_vel_x() {
  vel_x_ = 0;
}
inline double MonitorPvt::_internal_vel_x() const {
  return vel_x_;
}
inline double MonitorPvt::vel_x() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_x)
  return _internal_vel_x();
}
inline void MonitorPvt::_internal_set_vel_x(double value) {
  
  vel_x_ = value;
}
inline void MonitorPvt::set_vel_x(double value) {
  _internal_set_vel_x(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_x)
}

// double vel_y = 9;
inline void MonitorPvt::clear_vel_y() {
  vel_y_ = 0;
}
inline double MonitorPvt::_internal_vel_y() const {
  return vel_y_;
}
inline double MonitorPvt::vel_y() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_y)
  return _internal_vel_y();
}
inline void MonitorPvt::_internal_set_vel_y(double value) {
  
  vel_y_ = value;
}
inline void MonitorPvt::set_vel_y(double value) {
  _internal_set_vel_y(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_y)
}

// double vel_z = 10;
inline void MonitorPvt::clear_vel_z() {
  vel_z_ = 0;
}
inline double MonitorPvt::_internal_vel_z() const {
  return vel_z_;
}
inline double MonitorPvt::vel_z() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_z)
  return _internal_vel_z();
}
inline void MonitorPvt::_internal_set_vel_z(double value) {
  
  vel_z_ = value;
}
inline void MonitorPvt::set_vel_z(double value) {
  _internal_set_vel_z(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_z)
}

// double cov_xx = 11;
inline void MonitorPvt::clear_cov_xx() {
  cov_xx_ = 0;
}
inline double MonitorPvt::_internal_cov_xx() const {
  return cov_xx_;
}
inline double MonitorPvt::cov_xx() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_xx)
  return _internal_cov_xx();
}
inline void MonitorPvt::_internal_set_cov_xx(double value) {
  
  cov_xx_ = value;
}
inline void MonitorPvt::set_cov_xx(double value) {
  _internal_set_cov_xx(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_xx)
}

// double cov_yy = 12;
inline void MonitorPvt::clear_cov_yy() {
  cov_yy_ = 0;
}
inline double MonitorPvt::_internal_cov_yy() const {
  return cov_yy_;
}
inline double MonitorPvt::cov_yy() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_yy)
  return _internal_cov_yy();
}
inline void MonitorPvt::_internal_set_cov_yy(double value) {
  
  cov_yy_ = value;
}
inline void MonitorPvt::set_cov_yy(double value) {
  _internal_set_cov_yy(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_yy)
}

// double cov_zz = 13;
inline void MonitorPvt::clear_cov_zz() {
  cov_zz_ = 0;
}
inline double MonitorPvt::_internal_cov_zz() const {
  return cov_zz_;
}
inline double MonitorPvt::cov_zz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_zz)
  return _internal_cov_zz();
}
inline void MonitorPvt::_internal_set_cov_zz(double value) {
  
  cov_zz_ = value;
}
inline void MonitorPvt::set_cov_zz(double value) {
  _internal_set_cov_zz(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_zz)
}

// double cov_xy = 14;
inline void MonitorPvt::clear_cov_xy() {
  cov_xy_ = 0;
}
inline double MonitorPvt::_internal_cov_xy() const {
  return cov_xy_;
}
inline double MonitorPvt::cov_xy() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_xy)
  return _internal_cov_xy();
}
inline void MonitorPvt::_internal_set_cov_xy(double value) {
  
  cov_xy_ = value;
}
inline void MonitorPvt::set_cov_xy(double value) {
  _internal_set_cov_xy(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_xy)
}

// double cov_yz = 15;
inline void MonitorPvt::clear_cov_yz() {
  cov_yz_ = 0;
}
inline double MonitorPvt::_internal_cov_yz() const {
  return cov_yz_;
}
inline double MonitorPvt::cov_yz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_yz)
  return _internal_cov_yz();
}
inline void MonitorPvt::_internal_set_cov_yz(double value) {
  
  cov_yz_ = value;
}
inline void MonitorPvt::set_cov_yz(double value) {
  _internal_set_cov_yz(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_yz)
}

// double cov_zx = 16;
inline void MonitorPvt::clear_cov_zx() {
  cov_zx_ = 0;
}
inline double MonitorPvt::_internal_cov_zx() const {
  return cov_zx_;
}
inline double MonitorPvt::cov_zx() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_zx)
  return _internal_cov_zx();
}
inline void MonitorPvt::_internal_set_cov_zx(double value) {
  
  cov_zx_ = value;
}
inline void MonitorPvt::set_cov_zx(double value) {
  _internal_set_cov_zx(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_zx)
}

// double latitude = 17;
inline void MonitorPvt::clear_latitude() {
  latitude_ = 0;
}
inline double MonitorPvt::_internal_latitude() const {
  return latitude_;
}
inline double MonitorPvt::latitude() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.latitude)
  return _internal_latitude();
}
inline void MonitorPvt::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void MonitorPvt::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.latitude)
}

// double longitude = 18;
inline void MonitorPvt::clear_longitude() {
  longitude_ = 0;
}
inline double MonitorPvt::_internal_longitude() const {
  return longitude_;
}
inline double MonitorPvt::longitude() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.longitude)
  return _internal_longitude();
}
inline void MonitorPvt::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void MonitorPvt::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.longitude)
}

// double height = 19;
inline void MonitorPvt::clear_height() {
  height_ = 0;
}
inline double MonitorPvt::_internal_height() const {
  return height_;
}
inline double MonitorPvt::height() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.height)
  return _internal_height();
}
inline void MonitorPvt::_internal_set_height(double value) {
  
  height_ = value;
}
inline void MonitorPvt::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.height)
}

// uint32 valid_sats = 20;
inline void MonitorPvt::clear_valid_sats() {
  valid_sats_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_valid_sats() const {
  return valid_sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::valid_sats() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.valid_sats)
  return _internal_valid_sats();
}
inline void MonitorPvt::_internal_set_valid_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  valid_sats_ = value;
}
inline void MonitorPvt::set_valid_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valid_sats(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.valid_sats)
}

// uint32 solution_status = 21;
inline void MonitorPvt::clear_solution_status() {
  solution_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_solution_status() const {
  return solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::solution_status() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.solution_status)
  return _internal_solution_status();
}
inline void MonitorPvt::_internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solution_status_ = value;
}
inline void MonitorPvt::set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.solution_status)
}

// uint32 solution_type = 22;
inline void MonitorPvt::clear_solution_type() {
  solution_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_solution_type() const {
  return solution_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::solution_type() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.solution_type)
  return _internal_solution_type();
}
inline void MonitorPvt::_internal_set_solution_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solution_type_ = value;
}
inline void MonitorPvt::set_solution_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_type(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.solution_type)
}

// float ar_ratio_factor = 23;
inline void MonitorPvt::clear_ar_ratio_factor() {
  ar_ratio_factor_ = 0;
}
inline float MonitorPvt::_internal_ar_ratio_factor() const {
  return ar_ratio_factor_;
}
inline float MonitorPvt::ar_ratio_factor() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.ar_ratio_factor)
  return _internal_ar_ratio_factor();
}
inline void MonitorPvt::_internal_set_ar_ratio_factor(float value) {
  
  ar_ratio_factor_ = value;
}
inline void MonitorPvt::set_ar_ratio_factor(float value) {
  _internal_set_ar_ratio_factor(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.ar_ratio_factor)
}

// float ar_ratio_threshold = 24;
inline void MonitorPvt::clear_ar_ratio_threshold() {
  ar_ratio_threshold_ = 0;
}
inline float MonitorPvt::_internal_ar_ratio_threshold() const {
  return ar_ratio_threshold_;
}
inline float MonitorPvt::ar_ratio_threshold() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.ar_ratio_threshold)
  return _internal_ar_ratio_threshold();
}
inline void MonitorPvt::_internal_set_ar_ratio_threshold(float value) {
  
  ar_ratio_threshold_ = value;
}
inline void MonitorPvt::set_ar_ratio_threshold(float value) {
  _internal_set_ar_ratio_threshold(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.ar_ratio_threshold)
}

// double gdop = 25;
inline void MonitorPvt::clear_gdop() {
  gdop_ = 0;
}
inline double MonitorPvt::_internal_gdop() const {
  return gdop_;
}
inline double MonitorPvt::gdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.gdop)
  return _internal_gdop();
}
inline void MonitorPvt::_internal_set_gdop(double value) {
  
  gdop_ = value;
}
inline void MonitorPvt::set_gdop(double value) {
  _internal_set_gdop(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.gdop)
}

// double pdop = 26;
inline void MonitorPvt::clear_pdop() {
  pdop_ = 0;
}
inline double MonitorPvt::_internal_pdop() const {
  return pdop_;
}
inline double MonitorPvt::pdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pdop)
  return _internal_pdop();
}
inline void MonitorPvt::_internal_set_pdop(double value) {
  
  pdop_ = value;
}
inline void MonitorPvt::set_pdop(double value) {
  _internal_set_pdop(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pdop)
}

// double hdop = 27;
inline void MonitorPvt::clear_hdop() {
  hdop_ = 0;
}
inline double MonitorPvt::_internal_hdop() const {
  return hdop_;
}
inline double MonitorPvt::hdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.hdop)
  return _internal_hdop();
}
inline void MonitorPvt::_internal_set_hdop(double value) {
  
  hdop_ = value;
}
inline void MonitorPvt::set_hdop(double value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.hdop)
}

// double vdop = 28;
inline void MonitorPvt::clear_vdop() {
  vdop_ = 0;
}
inline double MonitorPvt::_internal_vdop() const {
  return vdop_;
}
inline double MonitorPvt::vdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vdop)
  return _internal_vdop();
}
inline void MonitorPvt::_internal_set_vdop(double value) {
  
  vdop_ = value;
}
inline void MonitorPvt::set_vdop(double value) {
  _internal_set_vdop(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vdop)
}

// double user_clk_drift_ppm = 29;
inline void MonitorPvt::clear_user_clk_drift_ppm() {
  user_clk_drift_ppm_ = 0;
}
inline double MonitorPvt::_internal_user_clk_drift_ppm() const {
  return user_clk_drift_ppm_;
}
inline double MonitorPvt::user_clk_drift_ppm() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.user_clk_drift_ppm)
  return _internal_user_clk_drift_ppm();
}
inline void MonitorPvt::_internal_set_user_clk_drift_ppm(double value) {
  
  user_clk_drift_ppm_ = value;
}
inline void MonitorPvt::set_user_clk_drift_ppm(double value) {
  _internal_set_user_clk_drift_ppm(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.user_clk_drift_ppm)
}

// string utc_time = 30;
inline void MonitorPvt::clear_utc_time() {
  utc_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MonitorPvt::utc_time() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.utc_time)
  return _internal_utc_time();
}
inline void MonitorPvt::set_utc_time(const std::string& value) {
  _internal_set_utc_time(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.utc_time)
}
inline std::string* MonitorPvt::mutable_utc_time() {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.MonitorPvt.utc_time)
  return _internal_mutable_utc_time();
}
inline const std::string& MonitorPvt::_internal_utc_time() const {
  return utc_time_.Get();
}
inline void MonitorPvt::_internal_set_utc_time(const std::string& value) {
  
  utc_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MonitorPvt::set_utc_time(std::string&& value) {
  
  utc_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gnss_sdr.MonitorPvt.utc_time)
}
inline void MonitorPvt::set_utc_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utc_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gnss_sdr.MonitorPvt.utc_time)
}
inline void MonitorPvt::set_utc_time(const char* value,
    size_t size) {
  
  utc_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gnss_sdr.MonitorPvt.utc_time)
}
inline std::string* MonitorPvt::_internal_mutable_utc_time() {
  
  return utc_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MonitorPvt::release_utc_time() {
  // @@protoc_insertion_point(field_release:gnss_sdr.MonitorPvt.utc_time)
  return utc_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MonitorPvt::set_allocated_utc_time(std::string* utc_time) {
  if (utc_time != nullptr) {
    
  } else {
    
  }
  utc_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utc_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.MonitorPvt.utc_time)
}
inline std::string* MonitorPvt::unsafe_arena_release_utc_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnss_sdr.MonitorPvt.utc_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return utc_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MonitorPvt::unsafe_arena_set_allocated_utc_time(
    std::string* utc_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (utc_time != nullptr) {
    
  } else {
    
  }
  utc_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      utc_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnss_sdr.MonitorPvt.utc_time)
}

// double vel_e = 31;
inline void MonitorPvt::clear_vel_e() {
  vel_e_ = 0;
}
inline double MonitorPvt::_internal_vel_e() const {
  return vel_e_;
}
inline double MonitorPvt::vel_e() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_e)
  return _internal_vel_e();
}
inline void MonitorPvt::_internal_set_vel_e(double value) {
  
  vel_e_ = value;
}
inline void MonitorPvt::set_vel_e(double value) {
  _internal_set_vel_e(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_e)
}

// double vel_n = 32;
inline void MonitorPvt::clear_vel_n() {
  vel_n_ = 0;
}
inline double MonitorPvt::_internal_vel_n() const {
  return vel_n_;
}
inline double MonitorPvt::vel_n() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_n)
  return _internal_vel_n();
}
inline void MonitorPvt::_internal_set_vel_n(double value) {
  
  vel_n_ = value;
}
inline void MonitorPvt::set_vel_n(double value) {
  _internal_set_vel_n(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_n)
}

// double vel_u = 33;
inline void MonitorPvt::clear_vel_u() {
  vel_u_ = 0;
}
inline double MonitorPvt::_internal_vel_u() const {
  return vel_u_;
}
inline double MonitorPvt::vel_u() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_u)
  return _internal_vel_u();
}
inline void MonitorPvt::_internal_set_vel_u(double value) {
  
  vel_u_ = value;
}
inline void MonitorPvt::set_vel_u(double value) {
  _internal_set_vel_u(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_u)
}

// double cog = 34;
inline void MonitorPvt::clear_cog() {
  cog_ = 0;
}
inline double MonitorPvt::_internal_cog() const {
  return cog_;
}
inline double MonitorPvt::cog() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cog)
  return _internal_cog();
}
inline void MonitorPvt::_internal_set_cog(double value) {
  
  cog_ = value;
}
inline void MonitorPvt::set_cog(double value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cog)
}

// uint32 galhas_status = 35;
inline void MonitorPvt::clear_galhas_status() {
  galhas_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::_internal_galhas_status() const {
  return galhas_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonitorPvt::galhas_status() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.galhas_status)
  return _internal_galhas_status();
}
inline void MonitorPvt::_internal_set_galhas_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  galhas_status_ = value;
}
inline void MonitorPvt::set_galhas_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_galhas_status(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.galhas_status)
}

// string geohash = 36;
inline void MonitorPvt::clear_geohash() {
  geohash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MonitorPvt::geohash() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.geohash)
  return _internal_geohash();
}
inline void MonitorPvt::set_geohash(const std::string& value) {
  _internal_set_geohash(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.geohash)
}
inline std::string* MonitorPvt::mutable_geohash() {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.MonitorPvt.geohash)
  return _internal_mutable_geohash();
}
inline const std::string& MonitorPvt::_internal_geohash() const {
  return geohash_.Get();
}
inline void MonitorPvt::_internal_set_geohash(const std::string& value) {
  
  geohash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MonitorPvt::set_geohash(std::string&& value) {
  
  geohash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gnss_sdr.MonitorPvt.geohash)
}
inline void MonitorPvt::set_geohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gnss_sdr.MonitorPvt.geohash)
}
inline void MonitorPvt::set_geohash(const char* value,
    size_t size) {
  
  geohash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gnss_sdr.MonitorPvt.geohash)
}
inline std::string* MonitorPvt::_internal_mutable_geohash() {
  
  return geohash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MonitorPvt::release_geohash() {
  // @@protoc_insertion_point(field_release:gnss_sdr.MonitorPvt.geohash)
  return geohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MonitorPvt::set_allocated_geohash(std::string* geohash) {
  if (geohash != nullptr) {
    
  } else {
    
  }
  geohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.MonitorPvt.geohash)
}
inline std::string* MonitorPvt::unsafe_arena_release_geohash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnss_sdr.MonitorPvt.geohash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geohash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MonitorPvt::unsafe_arena_set_allocated_geohash(
    std::string* geohash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geohash != nullptr) {
    
  } else {
    
  }
  geohash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geohash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnss_sdr.MonitorPvt.geohash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_sdr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_monitor_5fpvt_2eproto
