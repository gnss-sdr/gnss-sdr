// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_message.proto

#include "nav_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gnss_sdr {
class navMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<navMsg> _instance;
} _navMsg_default_instance_;
}  // namespace gnss_sdr
static void InitDefaultsscc_info_navMsg_nav_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_navMsg_default_instance_;
    new (ptr) ::gnss_sdr::navMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::navMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_navMsg_nav_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_navMsg_nav_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nav_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nav_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nav_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nav_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, system_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, signal_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, prn_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, tow_at_current_symbol_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::navMsg, nav_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_sdr::navMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnss_sdr::_navMsg_default_instance_),
};

const char descriptor_table_protodef_nav_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021nav_message.proto\022\010gnss_sdr\"l\n\006navMsg\022"
  "\016\n\006system\030\001 \001(\t\022\016\n\006signal\030\002 \001(\t\022\013\n\003prn\030\003"
  " \001(\005\022 \n\030tow_at_current_symbol_ms\030\004 \001(\005\022\023"
  "\n\013nav_message\030\005 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nav_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nav_5fmessage_2eproto_sccs[1] = {
  &scc_info_navMsg_nav_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nav_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nav_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_nav_5fmessage_2eproto, "nav_message.proto", 147,
  &descriptor_table_nav_5fmessage_2eproto_once, descriptor_table_nav_5fmessage_2eproto_sccs, descriptor_table_nav_5fmessage_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_nav_5fmessage_2eproto::offsets,
  file_level_metadata_nav_5fmessage_2eproto, 1, file_level_enum_descriptors_nav_5fmessage_2eproto, file_level_service_descriptors_nav_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nav_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nav_5fmessage_2eproto)), true);
namespace gnss_sdr {

// ===================================================================

void navMsg::InitAsDefaultInstance() {
}
class navMsg::_Internal {
 public:
};

navMsg::navMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.navMsg)
}
navMsg::navMsg(const navMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system(),
      GetArena());
  }
  signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal().empty()) {
    signal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signal(),
      GetArena());
  }
  nav_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nav_message().empty()) {
    nav_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nav_message(),
      GetArena());
  }
  ::memcpy(&prn_, &from.prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&tow_at_current_symbol_ms_) -
    reinterpret_cast<char*>(&prn_)) + sizeof(tow_at_current_symbol_ms_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.navMsg)
}

void navMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_navMsg_nav_5fmessage_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nav_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(tow_at_current_symbol_ms_));
}

navMsg::~navMsg() {
  // @@protoc_insertion_point(destructor:gnss_sdr.navMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void navMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nav_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void navMsg::ArenaDtor(void* object) {
  navMsg* _this = reinterpret_cast< navMsg* >(object);
  (void)_this;
}
void navMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void navMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const navMsg& navMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_navMsg_nav_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void navMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.navMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nav_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(tow_at_current_symbol_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* navMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_system();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.navMsg.system"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.navMsg.signal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tow_at_current_symbol_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tow_at_current_symbol_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nav_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nav_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.navMsg.nav_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* navMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.navMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.navMsg.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.navMsg.signal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signal(), target);
  }

  // int32 prn = 3;
  if (this->prn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prn(), target);
  }

  // int32 tow_at_current_symbol_ms = 4;
  if (this->tow_at_current_symbol_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tow_at_current_symbol_ms(), target);
  }

  // string nav_message = 5;
  if (this->nav_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nav_message().data(), static_cast<int>(this->_internal_nav_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.navMsg.nav_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nav_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.navMsg)
  return target;
}

size_t navMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.navMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // string nav_message = 5;
  if (this->nav_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nav_message());
  }

  // int32 prn = 3;
  if (this->prn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prn());
  }

  // int32 tow_at_current_symbol_ms = 4;
  if (this->tow_at_current_symbol_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tow_at_current_symbol_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void navMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.navMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const navMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<navMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.navMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.navMsg)
    MergeFrom(*source);
  }
}

void navMsg::MergeFrom(const navMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.navMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {
    _internal_set_system(from._internal_system());
  }
  if (from.signal().size() > 0) {
    _internal_set_signal(from._internal_signal());
  }
  if (from.nav_message().size() > 0) {
    _internal_set_nav_message(from._internal_nav_message());
  }
  if (from.prn() != 0) {
    _internal_set_prn(from._internal_prn());
  }
  if (from.tow_at_current_symbol_ms() != 0) {
    _internal_set_tow_at_current_symbol_ms(from._internal_tow_at_current_symbol_ms());
  }
}

void navMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.navMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void navMsg::CopyFrom(const navMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.navMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool navMsg::IsInitialized() const {
  return true;
}

void navMsg::InternalSwap(navMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signal_.Swap(&other->signal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nav_message_.Swap(&other->nav_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(navMsg, tow_at_current_symbol_ms_)
      + sizeof(navMsg::tow_at_current_symbol_ms_)
      - PROTOBUF_FIELD_OFFSET(navMsg, prn_)>(
          reinterpret_cast<char*>(&prn_),
          reinterpret_cast<char*>(&other->prn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata navMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnss_sdr::navMsg* Arena::CreateMaybeMessage< ::gnss_sdr::navMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::navMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
