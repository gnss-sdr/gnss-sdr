// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nav_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nav_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nav_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nav_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nav_5fmessage_2eproto;
namespace gnss_sdr {
class navMsg;
class navMsgDefaultTypeInternal;
extern navMsgDefaultTypeInternal _navMsg_default_instance_;
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> ::gnss_sdr::navMsg* Arena::CreateMaybeMessage<::gnss_sdr::navMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gnss_sdr {

// ===================================================================

class navMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.navMsg) */ {
 public:
  inline navMsg() : navMsg(nullptr) {};
  virtual ~navMsg();

  navMsg(const navMsg& from);
  navMsg(navMsg&& from) noexcept
    : navMsg() {
    *this = ::std::move(from);
  }

  inline navMsg& operator=(const navMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline navMsg& operator=(navMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const navMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const navMsg* internal_default_instance() {
    return reinterpret_cast<const navMsg*>(
               &_navMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(navMsg& a, navMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(navMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(navMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline navMsg* New() const final {
    return CreateMaybeMessage<navMsg>(nullptr);
  }

  navMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<navMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const navMsg& from);
  void MergeFrom(const navMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(navMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnss_sdr.navMsg";
  }
  protected:
  explicit navMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nav_5fmessage_2eproto);
    return ::descriptor_table_nav_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemFieldNumber = 1,
    kSignalFieldNumber = 2,
    kNavMessageFieldNumber = 5,
    kPrnFieldNumber = 3,
    kTowAtCurrentSymbolMsFieldNumber = 4,
  };
  // string system = 1;
  void clear_system();
  const std::string& system() const;
  void set_system(const std::string& value);
  void set_system(std::string&& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  std::string* mutable_system();
  std::string* release_system();
  void set_allocated_system(std::string* system);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_system();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_system(
      std::string* system);
  private:
  const std::string& _internal_system() const;
  void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // string signal = 2;
  void clear_signal();
  const std::string& signal() const;
  void set_signal(const std::string& value);
  void set_signal(std::string&& value);
  void set_signal(const char* value);
  void set_signal(const char* value, size_t size);
  std::string* mutable_signal();
  std::string* release_signal();
  void set_allocated_signal(std::string* signal);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signal();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signal(
      std::string* signal);
  private:
  const std::string& _internal_signal() const;
  void _internal_set_signal(const std::string& value);
  std::string* _internal_mutable_signal();
  public:

  // string nav_message = 5;
  void clear_nav_message();
  const std::string& nav_message() const;
  void set_nav_message(const std::string& value);
  void set_nav_message(std::string&& value);
  void set_nav_message(const char* value);
  void set_nav_message(const char* value, size_t size);
  std::string* mutable_nav_message();
  std::string* release_nav_message();
  void set_allocated_nav_message(std::string* nav_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nav_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nav_message(
      std::string* nav_message);
  private:
  const std::string& _internal_nav_message() const;
  void _internal_set_nav_message(const std::string& value);
  std::string* _internal_mutable_nav_message();
  public:

  // int32 prn = 3;
  void clear_prn();
  ::PROTOBUF_NAMESPACE_ID::int32 prn() const;
  void set_prn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prn() const;
  void _internal_set_prn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tow_at_current_symbol_ms = 4;
  void clear_tow_at_current_symbol_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 tow_at_current_symbol_ms() const;
  void set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tow_at_current_symbol_ms() const;
  void _internal_set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gnss_sdr.navMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nav_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 prn_;
  ::PROTOBUF_NAMESPACE_ID::int32 tow_at_current_symbol_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nav_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// navMsg

// string system = 1;
inline void navMsg::clear_system() {
  system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& navMsg::system() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.navMsg.system)
  return _internal_system();
}
inline void navMsg::set_system(const std::string& value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.navMsg.system)
}
inline std::string* navMsg::mutable_system() {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.navMsg.system)
  return _internal_mutable_system();
}
inline const std::string& navMsg::_internal_system() const {
  return system_.Get();
}
inline void navMsg::_internal_set_system(const std::string& value) {
  
  system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void navMsg::set_system(std::string&& value) {
  
  system_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gnss_sdr.navMsg.system)
}
inline void navMsg::set_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gnss_sdr.navMsg.system)
}
inline void navMsg::set_system(const char* value,
    size_t size) {
  
  system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gnss_sdr.navMsg.system)
}
inline std::string* navMsg::_internal_mutable_system() {
  
  return system_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* navMsg::release_system() {
  // @@protoc_insertion_point(field_release:gnss_sdr.navMsg.system)
  return system_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void navMsg::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  system_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.navMsg.system)
}
inline std::string* navMsg::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnss_sdr.navMsg.system)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return system_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void navMsg::unsafe_arena_set_allocated_system(
    std::string* system) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (system != nullptr) {
    
  } else {
    
  }
  system_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      system, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnss_sdr.navMsg.system)
}

// string signal = 2;
inline void navMsg::clear_signal() {
  signal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& navMsg::signal() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.navMsg.signal)
  return _internal_signal();
}
inline void navMsg::set_signal(const std::string& value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.navMsg.signal)
}
inline std::string* navMsg::mutable_signal() {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.navMsg.signal)
  return _internal_mutable_signal();
}
inline const std::string& navMsg::_internal_signal() const {
  return signal_.Get();
}
inline void navMsg::_internal_set_signal(const std::string& value) {
  
  signal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void navMsg::set_signal(std::string&& value) {
  
  signal_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gnss_sdr.navMsg.signal)
}
inline void navMsg::set_signal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gnss_sdr.navMsg.signal)
}
inline void navMsg::set_signal(const char* value,
    size_t size) {
  
  signal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gnss_sdr.navMsg.signal)
}
inline std::string* navMsg::_internal_mutable_signal() {
  
  return signal_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* navMsg::release_signal() {
  // @@protoc_insertion_point(field_release:gnss_sdr.navMsg.signal)
  return signal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void navMsg::set_allocated_signal(std::string* signal) {
  if (signal != nullptr) {
    
  } else {
    
  }
  signal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.navMsg.signal)
}
inline std::string* navMsg::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnss_sdr.navMsg.signal)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signal_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void navMsg::unsafe_arena_set_allocated_signal(
    std::string* signal) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signal != nullptr) {
    
  } else {
    
  }
  signal_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signal, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnss_sdr.navMsg.signal)
}

// int32 prn = 3;
inline void navMsg::clear_prn() {
  prn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 navMsg::_internal_prn() const {
  return prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 navMsg::prn() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.navMsg.prn)
  return _internal_prn();
}
inline void navMsg::_internal_set_prn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prn_ = value;
}
inline void navMsg::set_prn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prn(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.navMsg.prn)
}

// int32 tow_at_current_symbol_ms = 4;
inline void navMsg::clear_tow_at_current_symbol_ms() {
  tow_at_current_symbol_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 navMsg::_internal_tow_at_current_symbol_ms() const {
  return tow_at_current_symbol_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 navMsg::tow_at_current_symbol_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.navMsg.tow_at_current_symbol_ms)
  return _internal_tow_at_current_symbol_ms();
}
inline void navMsg::_internal_set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tow_at_current_symbol_ms_ = value;
}
inline void navMsg::set_tow_at_current_symbol_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tow_at_current_symbol_ms(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.navMsg.tow_at_current_symbol_ms)
}

// string nav_message = 5;
inline void navMsg::clear_nav_message() {
  nav_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& navMsg::nav_message() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.navMsg.nav_message)
  return _internal_nav_message();
}
inline void navMsg::set_nav_message(const std::string& value) {
  _internal_set_nav_message(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.navMsg.nav_message)
}
inline std::string* navMsg::mutable_nav_message() {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.navMsg.nav_message)
  return _internal_mutable_nav_message();
}
inline const std::string& navMsg::_internal_nav_message() const {
  return nav_message_.Get();
}
inline void navMsg::_internal_set_nav_message(const std::string& value) {
  
  nav_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void navMsg::set_nav_message(std::string&& value) {
  
  nav_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gnss_sdr.navMsg.nav_message)
}
inline void navMsg::set_nav_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nav_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gnss_sdr.navMsg.nav_message)
}
inline void navMsg::set_nav_message(const char* value,
    size_t size) {
  
  nav_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gnss_sdr.navMsg.nav_message)
}
inline std::string* navMsg::_internal_mutable_nav_message() {
  
  return nav_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* navMsg::release_nav_message() {
  // @@protoc_insertion_point(field_release:gnss_sdr.navMsg.nav_message)
  return nav_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void navMsg::set_allocated_nav_message(std::string* nav_message) {
  if (nav_message != nullptr) {
    
  } else {
    
  }
  nav_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nav_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.navMsg.nav_message)
}
inline std::string* navMsg::unsafe_arena_release_nav_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnss_sdr.navMsg.nav_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nav_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void navMsg::unsafe_arena_set_allocated_nav_message(
    std::string* nav_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nav_message != nullptr) {
    
  } else {
    
  }
  nav_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nav_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnss_sdr.navMsg.nav_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_sdr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nav_5fmessage_2eproto
