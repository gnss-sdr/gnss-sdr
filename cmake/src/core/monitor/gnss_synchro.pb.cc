// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_synchro.proto

#include "gnss_synchro.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gnss_5fsynchro_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnssSynchro_gnss_5fsynchro_2eproto;
namespace gnss_sdr {
class GnssSynchroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssSynchro> _instance;
} _GnssSynchro_default_instance_;
class ObservablesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Observables> _instance;
} _Observables_default_instance_;
}  // namespace gnss_sdr
static void InitDefaultsscc_info_GnssSynchro_gnss_5fsynchro_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_GnssSynchro_default_instance_;
    new (ptr) ::gnss_sdr::GnssSynchro();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::GnssSynchro::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnssSynchro_gnss_5fsynchro_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GnssSynchro_gnss_5fsynchro_2eproto}, {}};

static void InitDefaultsscc_info_Observables_gnss_5fsynchro_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_Observables_default_instance_;
    new (ptr) ::gnss_sdr::Observables();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::Observables::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Observables_gnss_5fsynchro_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Observables_gnss_5fsynchro_2eproto}, {
      &scc_info_GnssSynchro_gnss_5fsynchro_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gnss_5fsynchro_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gnss_5fsynchro_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gnss_5fsynchro_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gnss_5fsynchro_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, system_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, signal_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prn_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, channel_id_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_delay_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_doppler_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_samplestamp_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_doppler_step_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_acquisition_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, fs_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prompt_i_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prompt_q_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, cn0_db_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, carrier_doppler_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, carrier_phase_rads_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, code_phase_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, tracking_sample_counter_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_symbol_output_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, correlation_length_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_word_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, tow_at_current_symbol_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, pseudorange_m_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, rx_time_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_pseudorange_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, interp_tow_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_pll_180_deg_phase_locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::Observables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::Observables, observable_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_sdr::GnssSynchro)},
  { 31, -1, sizeof(::gnss_sdr::Observables)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnss_sdr::_GnssSynchro_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnss_sdr::_Observables_default_instance_),
};

const char descriptor_table_protodef_gnss_5fsynchro_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022gnss_synchro.proto\022\010gnss_sdr\"\226\005\n\013GnssS"
  "ynchro\022\016\n\006system\030\001 \001(\t\022\016\n\006signal\030\002 \001(\t\022\013"
  "\n\003prn\030\003 \001(\r\022\022\n\nchannel_id\030\004 \001(\005\022\031\n\021acq_d"
  "elay_samples\030\005 \001(\001\022\026\n\016acq_doppler_hz\030\006 \001"
  "(\001\022\037\n\027acq_samplestamp_samples\030\007 \001(\004\022\030\n\020a"
  "cq_doppler_step\030\010 \001(\r\022\036\n\026flag_valid_acqu"
  "isition\030\t \001(\010\022\n\n\002fs\030\n \001(\003\022\020\n\010prompt_i\030\013 "
  "\001(\001\022\020\n\010prompt_q\030\014 \001(\001\022\021\n\tcn0_db_hz\030\r \001(\001"
  "\022\032\n\022carrier_doppler_hz\030\016 \001(\001\022\032\n\022carrier_"
  "phase_rads\030\017 \001(\001\022\032\n\022code_phase_samples\030\020"
  " \001(\001\022\037\n\027tracking_sample_counter\030\021 \001(\004\022 \n"
  "\030flag_valid_symbol_output\030\022 \001(\010\022\035\n\025corre"
  "lation_length_ms\030\023 \001(\005\022\027\n\017flag_valid_wor"
  "d\030\024 \001(\010\022 \n\030tow_at_current_symbol_ms\030\025 \001("
  "\r\022\025\n\rpseudorange_m\030\026 \001(\001\022\017\n\007rx_time\030\027 \001("
  "\001\022\036\n\026flag_valid_pseudorange\030\030 \001(\010\022\025\n\rint"
  "erp_tow_ms\030\031 \001(\001\022%\n\035flag_PLL_180_deg_pha"
  "se_locked\030\032 \001(\010\"8\n\013Observables\022)\n\nobserv"
  "able\030\001 \003(\0132\025.gnss_sdr.GnssSynchrob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gnss_5fsynchro_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gnss_5fsynchro_2eproto_sccs[2] = {
  &scc_info_GnssSynchro_gnss_5fsynchro_2eproto.base,
  &scc_info_Observables_gnss_5fsynchro_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gnss_5fsynchro_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnss_5fsynchro_2eproto = {
  false, false, descriptor_table_protodef_gnss_5fsynchro_2eproto, "gnss_synchro.proto", 761,
  &descriptor_table_gnss_5fsynchro_2eproto_once, descriptor_table_gnss_5fsynchro_2eproto_sccs, descriptor_table_gnss_5fsynchro_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_gnss_5fsynchro_2eproto::offsets,
  file_level_metadata_gnss_5fsynchro_2eproto, 2, file_level_enum_descriptors_gnss_5fsynchro_2eproto, file_level_service_descriptors_gnss_5fsynchro_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gnss_5fsynchro_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gnss_5fsynchro_2eproto)), true);
namespace gnss_sdr {

// ===================================================================

void GnssSynchro::InitAsDefaultInstance() {
}
class GnssSynchro::_Internal {
 public:
};

GnssSynchro::GnssSynchro(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.GnssSynchro)
}
GnssSynchro::GnssSynchro(const GnssSynchro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system(),
      GetArena());
  }
  signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal().empty()) {
    signal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signal(),
      GetArena());
  }
  ::memcpy(&prn_, &from.prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
    reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.GnssSynchro)
}

void GnssSynchro::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssSynchro_gnss_5fsynchro_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
}

GnssSynchro::~GnssSynchro() {
  // @@protoc_insertion_point(destructor:gnss_sdr.GnssSynchro)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssSynchro::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GnssSynchro::ArenaDtor(void* object) {
  GnssSynchro* _this = reinterpret_cast< GnssSynchro* >(object);
  (void)_this;
}
void GnssSynchro::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssSynchro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssSynchro& GnssSynchro::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssSynchro_gnss_5fsynchro_2eproto.base);
  return *internal_default_instance();
}


void GnssSynchro::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.GnssSynchro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssSynchro::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_system();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.GnssSynchro.system"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnss_sdr.GnssSynchro.signal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double acq_delay_samples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acq_delay_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acq_doppler_hz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          acq_doppler_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 acq_samplestamp_samples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          acq_samplestamp_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 acq_doppler_step = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          acq_doppler_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flag_valid_acquisition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          flag_valid_acquisition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          fs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double prompt_i = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          prompt_i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double prompt_q = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          prompt_q_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cn0_db_hz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          cn0_db_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double carrier_doppler_hz = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          carrier_doppler_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double carrier_phase_rads = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          carrier_phase_rads_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double code_phase_samples = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          code_phase_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 tracking_sample_counter = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          tracking_sample_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flag_valid_symbol_output = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          flag_valid_symbol_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 correlation_length_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          correlation_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flag_valid_word = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          flag_valid_word_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tow_at_current_symbol_ms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          tow_at_current_symbol_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pseudorange_m = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          pseudorange_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rx_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          rx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool flag_valid_pseudorange = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          flag_valid_pseudorange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double interp_tow_ms = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          interp_tow_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool flag_PLL_180_deg_phase_locked = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          flag_pll_180_deg_phase_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssSynchro::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.GnssSynchro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.signal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signal(), target);
  }

  // uint32 prn = 3;
  if (this->prn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prn(), target);
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel_id(), target);
  }

  // double acq_delay_samples = 5;
  if (!(this->acq_delay_samples() <= 0 && this->acq_delay_samples() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acq_delay_samples(), target);
  }

  // double acq_doppler_hz = 6;
  if (!(this->acq_doppler_hz() <= 0 && this->acq_doppler_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_acq_doppler_hz(), target);
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->acq_samplestamp_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_acq_samplestamp_samples(), target);
  }

  // uint32 acq_doppler_step = 8;
  if (this->acq_doppler_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_acq_doppler_step(), target);
  }

  // bool flag_valid_acquisition = 9;
  if (this->flag_valid_acquisition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_flag_valid_acquisition(), target);
  }

  // int64 fs = 10;
  if (this->fs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_fs(), target);
  }

  // double prompt_i = 11;
  if (!(this->prompt_i() <= 0 && this->prompt_i() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_prompt_i(), target);
  }

  // double prompt_q = 12;
  if (!(this->prompt_q() <= 0 && this->prompt_q() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_prompt_q(), target);
  }

  // double cn0_db_hz = 13;
  if (!(this->cn0_db_hz() <= 0 && this->cn0_db_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_cn0_db_hz(), target);
  }

  // double carrier_doppler_hz = 14;
  if (!(this->carrier_doppler_hz() <= 0 && this->carrier_doppler_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_carrier_doppler_hz(), target);
  }

  // double carrier_phase_rads = 15;
  if (!(this->carrier_phase_rads() <= 0 && this->carrier_phase_rads() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_carrier_phase_rads(), target);
  }

  // double code_phase_samples = 16;
  if (!(this->code_phase_samples() <= 0 && this->code_phase_samples() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_code_phase_samples(), target);
  }

  // uint64 tracking_sample_counter = 17;
  if (this->tracking_sample_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_tracking_sample_counter(), target);
  }

  // bool flag_valid_symbol_output = 18;
  if (this->flag_valid_symbol_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_flag_valid_symbol_output(), target);
  }

  // int32 correlation_length_ms = 19;
  if (this->correlation_length_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_correlation_length_ms(), target);
  }

  // bool flag_valid_word = 20;
  if (this->flag_valid_word() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_flag_valid_word(), target);
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->tow_at_current_symbol_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_tow_at_current_symbol_ms(), target);
  }

  // double pseudorange_m = 22;
  if (!(this->pseudorange_m() <= 0 && this->pseudorange_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_pseudorange_m(), target);
  }

  // double rx_time = 23;
  if (!(this->rx_time() <= 0 && this->rx_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_rx_time(), target);
  }

  // bool flag_valid_pseudorange = 24;
  if (this->flag_valid_pseudorange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_flag_valid_pseudorange(), target);
  }

  // double interp_tow_ms = 25;
  if (!(this->interp_tow_ms() <= 0 && this->interp_tow_ms() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_interp_tow_ms(), target);
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->flag_pll_180_deg_phase_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_flag_pll_180_deg_phase_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.GnssSynchro)
  return target;
}

size_t GnssSynchro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.GnssSynchro)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // uint32 prn = 3;
  if (this->prn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prn());
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  // double acq_delay_samples = 5;
  if (!(this->acq_delay_samples() <= 0 && this->acq_delay_samples() >= 0)) {
    total_size += 1 + 8;
  }

  // double acq_doppler_hz = 6;
  if (!(this->acq_doppler_hz() <= 0 && this->acq_doppler_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->acq_samplestamp_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_acq_samplestamp_samples());
  }

  // int64 fs = 10;
  if (this->fs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fs());
  }

  // double prompt_i = 11;
  if (!(this->prompt_i() <= 0 && this->prompt_i() >= 0)) {
    total_size += 1 + 8;
  }

  // double prompt_q = 12;
  if (!(this->prompt_q() <= 0 && this->prompt_q() >= 0)) {
    total_size += 1 + 8;
  }

  // double cn0_db_hz = 13;
  if (!(this->cn0_db_hz() <= 0 && this->cn0_db_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // double carrier_doppler_hz = 14;
  if (!(this->carrier_doppler_hz() <= 0 && this->carrier_doppler_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // double carrier_phase_rads = 15;
  if (!(this->carrier_phase_rads() <= 0 && this->carrier_phase_rads() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 acq_doppler_step = 8;
  if (this->acq_doppler_step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acq_doppler_step());
  }

  // bool flag_valid_acquisition = 9;
  if (this->flag_valid_acquisition() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_valid_symbol_output = 18;
  if (this->flag_valid_symbol_output() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_word = 20;
  if (this->flag_valid_word() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_pseudorange = 24;
  if (this->flag_valid_pseudorange() != 0) {
    total_size += 2 + 1;
  }

  // double code_phase_samples = 16;
  if (!(this->code_phase_samples() <= 0 && this->code_phase_samples() >= 0)) {
    total_size += 2 + 8;
  }

  // uint64 tracking_sample_counter = 17;
  if (this->tracking_sample_counter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tracking_sample_counter());
  }

  // int32 correlation_length_ms = 19;
  if (this->correlation_length_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_correlation_length_ms());
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->tow_at_current_symbol_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tow_at_current_symbol_ms());
  }

  // double pseudorange_m = 22;
  if (!(this->pseudorange_m() <= 0 && this->pseudorange_m() >= 0)) {
    total_size += 2 + 8;
  }

  // double rx_time = 23;
  if (!(this->rx_time() <= 0 && this->rx_time() >= 0)) {
    total_size += 2 + 8;
  }

  // double interp_tow_ms = 25;
  if (!(this->interp_tow_ms() <= 0 && this->interp_tow_ms() >= 0)) {
    total_size += 2 + 8;
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->flag_pll_180_deg_phase_locked() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssSynchro::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.GnssSynchro)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssSynchro* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssSynchro>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.GnssSynchro)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.GnssSynchro)
    MergeFrom(*source);
  }
}

void GnssSynchro::MergeFrom(const GnssSynchro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.GnssSynchro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {
    _internal_set_system(from._internal_system());
  }
  if (from.signal().size() > 0) {
    _internal_set_signal(from._internal_signal());
  }
  if (from.prn() != 0) {
    _internal_set_prn(from._internal_prn());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (!(from.acq_delay_samples() <= 0 && from.acq_delay_samples() >= 0)) {
    _internal_set_acq_delay_samples(from._internal_acq_delay_samples());
  }
  if (!(from.acq_doppler_hz() <= 0 && from.acq_doppler_hz() >= 0)) {
    _internal_set_acq_doppler_hz(from._internal_acq_doppler_hz());
  }
  if (from.acq_samplestamp_samples() != 0) {
    _internal_set_acq_samplestamp_samples(from._internal_acq_samplestamp_samples());
  }
  if (from.fs() != 0) {
    _internal_set_fs(from._internal_fs());
  }
  if (!(from.prompt_i() <= 0 && from.prompt_i() >= 0)) {
    _internal_set_prompt_i(from._internal_prompt_i());
  }
  if (!(from.prompt_q() <= 0 && from.prompt_q() >= 0)) {
    _internal_set_prompt_q(from._internal_prompt_q());
  }
  if (!(from.cn0_db_hz() <= 0 && from.cn0_db_hz() >= 0)) {
    _internal_set_cn0_db_hz(from._internal_cn0_db_hz());
  }
  if (!(from.carrier_doppler_hz() <= 0 && from.carrier_doppler_hz() >= 0)) {
    _internal_set_carrier_doppler_hz(from._internal_carrier_doppler_hz());
  }
  if (!(from.carrier_phase_rads() <= 0 && from.carrier_phase_rads() >= 0)) {
    _internal_set_carrier_phase_rads(from._internal_carrier_phase_rads());
  }
  if (from.acq_doppler_step() != 0) {
    _internal_set_acq_doppler_step(from._internal_acq_doppler_step());
  }
  if (from.flag_valid_acquisition() != 0) {
    _internal_set_flag_valid_acquisition(from._internal_flag_valid_acquisition());
  }
  if (from.flag_valid_symbol_output() != 0) {
    _internal_set_flag_valid_symbol_output(from._internal_flag_valid_symbol_output());
  }
  if (from.flag_valid_word() != 0) {
    _internal_set_flag_valid_word(from._internal_flag_valid_word());
  }
  if (from.flag_valid_pseudorange() != 0) {
    _internal_set_flag_valid_pseudorange(from._internal_flag_valid_pseudorange());
  }
  if (!(from.code_phase_samples() <= 0 && from.code_phase_samples() >= 0)) {
    _internal_set_code_phase_samples(from._internal_code_phase_samples());
  }
  if (from.tracking_sample_counter() != 0) {
    _internal_set_tracking_sample_counter(from._internal_tracking_sample_counter());
  }
  if (from.correlation_length_ms() != 0) {
    _internal_set_correlation_length_ms(from._internal_correlation_length_ms());
  }
  if (from.tow_at_current_symbol_ms() != 0) {
    _internal_set_tow_at_current_symbol_ms(from._internal_tow_at_current_symbol_ms());
  }
  if (!(from.pseudorange_m() <= 0 && from.pseudorange_m() >= 0)) {
    _internal_set_pseudorange_m(from._internal_pseudorange_m());
  }
  if (!(from.rx_time() <= 0 && from.rx_time() >= 0)) {
    _internal_set_rx_time(from._internal_rx_time());
  }
  if (!(from.interp_tow_ms() <= 0 && from.interp_tow_ms() >= 0)) {
    _internal_set_interp_tow_ms(from._internal_interp_tow_ms());
  }
  if (from.flag_pll_180_deg_phase_locked() != 0) {
    _internal_set_flag_pll_180_deg_phase_locked(from._internal_flag_pll_180_deg_phase_locked());
  }
}

void GnssSynchro::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.GnssSynchro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssSynchro::CopyFrom(const GnssSynchro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.GnssSynchro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssSynchro::IsInitialized() const {
  return true;
}

void GnssSynchro::InternalSwap(GnssSynchro* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signal_.Swap(&other->signal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssSynchro, flag_pll_180_deg_phase_locked_)
      + sizeof(GnssSynchro::flag_pll_180_deg_phase_locked_)
      - PROTOBUF_FIELD_OFFSET(GnssSynchro, prn_)>(
          reinterpret_cast<char*>(&prn_),
          reinterpret_cast<char*>(&other->prn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssSynchro::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Observables::InitAsDefaultInstance() {
}
class Observables::_Internal {
 public:
};

Observables::Observables(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  observable_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.Observables)
}
Observables::Observables(const Observables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      observable_(from.observable_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.Observables)
}

void Observables::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Observables_gnss_5fsynchro_2eproto.base);
}

Observables::~Observables() {
  // @@protoc_insertion_point(destructor:gnss_sdr.Observables)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Observables::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Observables::ArenaDtor(void* object) {
  Observables* _this = reinterpret_cast< Observables* >(object);
  (void)_this;
}
void Observables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Observables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Observables& Observables::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Observables_gnss_5fsynchro_2eproto.base);
  return *internal_default_instance();
}


void Observables::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.Observables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observable_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Observables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gnss_sdr.GnssSynchro observable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Observables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.Observables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_observable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_observable(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.Observables)
  return target;
}

size_t Observables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.Observables)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  total_size += 1UL * this->_internal_observable_size();
  for (const auto& msg : this->observable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Observables::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.Observables)
  GOOGLE_DCHECK_NE(&from, this);
  const Observables* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Observables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.Observables)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.Observables)
    MergeFrom(*source);
  }
}

void Observables::MergeFrom(const Observables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.Observables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observable_.MergeFrom(from.observable_);
}

void Observables::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.Observables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observables::CopyFrom(const Observables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.Observables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observables::IsInitialized() const {
  return true;
}

void Observables::InternalSwap(Observables* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  observable_.InternalSwap(&other->observable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Observables::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnss_sdr::GnssSynchro* Arena::CreateMaybeMessage< ::gnss_sdr::GnssSynchro >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::GnssSynchro >(arena);
}
template<> PROTOBUF_NOINLINE ::gnss_sdr::Observables* Arena::CreateMaybeMessage< ::gnss_sdr::Observables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::Observables >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
